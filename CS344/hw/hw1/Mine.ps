%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: Mine.dvi
%%CreationDate: Mon Jun 29 23:06:44 2015
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR10 CMR7 CMBX12
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter Mine.dvi -o Mine.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2015.06.29:2306
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse
 
@fedspecial end
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 58 /colon put
dup 80 /P put
dup 98 /b put
dup 101 /e put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7B00AD58FAF645
1297991B5D01701E82228D0313FC7C66B263BC79ACDDF9AAC48A3CBF42B96E38
583E1D059953076D68148DC8B6C9527B3A74CE7DEF788A11531F44120BDF0F61
0B2F3ED94EEBCDE4ACD23834C242AA4314B9EF98E4BE72DB76EBDD0A028CEA9D
B4C38C1F2D24B8FDE686832FE96204552C820E45B6BAF0C3308742AE2BFF4558
33299D143C83CA197F93F10ED53A480E2E64BE92A3F0B2E33B7391EEC710CDC3
54CC621F244B60DB2680275F5F8752F6247335AF62C804B5F2FCB501D0F3D522
D872B065E22DCCE085E767B098F7AD33D4A7A4F0E439E0EFFD95BCE91A04D783
0310A47B9BE8F564A88F1CE278D8577EC375D3E704A4BEFADBDC58C94BDCAB24
408A1322289A75334E3A50DCDF7A0B48ADD7EEDF04E6EC29EED4B254588C8FB2
B714BBF1A598B5C545442C138AB7525732116079D977EFF2012849FBBD51085A
E0858E4A3A87FA527D8E6DF2461755938E0F740013FF4718ACB67DF2C0E3B7ED
B000AB5F8C6FB1D78571A49D24C4C671B414A22062740F9465B9380A02FA2ED5
D45618309905A05DA43C463715428431211958F0A974303BF67ECFF3CA581417
24DC25B99E788873B0727CBB57F5DC7FCF4ECC3DD93F0DE3DDB8B98668FE18DB
97E9047A7398DDEEBDD409FAF657C129648769F8606361320CA57EB27FDCDC0F
8945D73B361271EB06EE55D3A6235D54A5098690A7A2C0B736A142A8A293ECE7
2F767211F81AE7CC1037B758E463032988643EBF38E5D31F922BCC1F86933555
956B751EFAF4CD187E89B6E2A1F3D74C3579073B46F87A72920FF7CCCFE5D776
D7945C99A220CE1D78739F4428B34D1C0B18327B9520764669258729A0DDF7F2
8D0DC2433B990B648A08E61C165E9D6D9CA7E3BA1B146A7E9E00CFEA64CEAB3C
DE78676A79E3E0F61A8D354F33C6E67D558210D95DB35C76CB41283D571D9B45
034DD250BE1CE7A16C4C4558840BAB28B95E93AAEAADBA766D8694D0C50BBDAA
7FBBBCD2777E14AACF35596C4F2F0C740C3C8B646292AECE9A5182AB03494B9F
15C92F0E486FFCCC9BD00982777942B81513C8141B00C8DFEB01AFF81C533324
F310140A84293B1C34C630AD1613CB60AE1479813FF75F3652C57532DFD1E7B6
4EC3A7D55DEEDA7DB9EAB890566AAF865CB396A15EA4E2E052B6155F9D56FDBE
EC951B38D39F2B7AB0F6DF9FC9B5D6123F2BD8A43EA720F74E2AEC0832603942
5EDF43AB6E4CBAABF601C472DED192624BE58903ABBE61984F14C4F2F42351D4
F725766B589A63A5F67103EFE2309EE92C620D2C22ADE222966AA50518731978
A30B59818540E8C305112811693264228ADB3AA9817BFA699C489B9A3E75572A
CE7B757FDBF3DAEDD1D34FDCF91AB316E2394AE6F6C678855EAA24F94E5DA009
B9A08CA7798E2F1EB4609DABF0FE2A187EDC43E6C2AA244231B2FD7E7DC55E33
25E3145062AE88BF0BE4C697BB96693F1F30015D1B0F1769CFADC3FDA1BC5BBA
AFDC5CE8BCF64C241370EDB56C0A255DC16965D7496D717250819F0BA75B1AD1
EF20783F59E9E9F4091A085C96171A705AAA6B17BD16A11D892795F6E66AEFCB
563A24F708E0AB79BE1CFFADA16DCB819444FDBA4CAE9068FF739B3CFBEB8EE0
45F2F4C09DA649E1ED826D2E626D60DF8BB470A5947C3963E4851E04B1E11BE7
9A9742A9779CBFFBA7CA3519D2171889A55076B5959042E250B8FE6B4D3ABC6B
E7BA4D289166552BD5E3FE4E2214D311391AFBDB674507A1ADEEA938B4A8111A
C7D3FFA0F5ED5522E76BB97F4A90C761F37B80E2966B3FDF8BEF783AE0103690
E4444D99EE747A6218858887C67E6271DB85EAE07CFDA8A6858FE81704C9F986
57CE92897D1736BCC9D19CA515AC88723AC3519616708876A9033721DA47FFE5
A4D51358A6F1237DC3F21E008429F50D3DC2311BE64DDFE3A29157EB5FA7FD69
8B6CA322F4FEC90D2E297AC591EECD20D036F7466C575DBD124D40CF6F0421A5
79951FF0D01FF9CF4D0E84FDD08054599B1FF419EE33BDE7CA9FB2B4255EA732
ECAA8EDDE3E6852319A5BD313644FAC36C60B77DC8B1D1B770A97035DF8DA16D
70F1D6AB433E90054CE4DC922E428A8C012FBE64C33E6B039394B6BDF213B167
80EE4210C9A77D049FF81216F15C865843E8ACAF1DC44912ED3AA2A758BBE3BD
1000C19FD5CD98F3CBC1F8398443DA8412C00DB78D5764EDA312A33622AA277B
A15F0D57817E1EEC9BEF4A5AC05BED4B846BE222ABD3AF34000500A4AC6A7276
D0E4582423D820DD840B0EEB9CD822E63657A0EF3FF2CDCDA8B997EBE621BD14
929BAA5B1A9528FF8DFD27FD2E549A22B95F26482F48A2573494F3C9F1B37FB0
6A8394F9CF538B31CDBA95231EAFAF6BBD6A50A902B67DB20D354331500BCDAB
0032ABF244F1548970E33355F70A32BD67277191C97F54B52DBA1C3F7B0BAAB0
CFF93F7E6AFD5111D430D25804EEBBCA77624A95A3C72C547504B2A26769ADA8
CD76352A990FD3B7CB74B07805754C64BECD8A171CCC15A9A7D8EECCE0DD9A78
11F39D65DD38A19F52B4ACDBCF4751362698328949101A9FAEBAA23B81B6382F
981E2665FD0E59AB777A9C79AD4F2FD6EF04CB9F4D2AB7C5793C0DF026469C68
CAD7D96037454F4C5C5EBC6E486F4E7D96D98A8045DE82CDECFF2C09776B5F60
49AAA30002FA14ADED201ADA81AEDDDCF040D37C7AE77EE493E0DEDCDBD287B5
2FBF4E49F765B2207832801BE4A462F612A4CA2EC174B4C75EC0452B91A5C0CA
ACAE339FFC4B32A8F41D8C6D30C10F55F14E7FFAF6AD3CA5C9F0FE16023B5195
2863EF904BC1AB55593F2DA89C2069FCDE2620E0BE1D4E9F61818A54B9D67364
12C916219C4BB44DA09B30BE28E0FE1D3F6F78A9ABF0107C1F57B8297768694F
D033A5AE9B4BBDF6F49BB1261E99879EA5CBF710E2FBD7B8A5B0B0FC9389665A
705FE208E5E4AB95B979C7C85E73B41FA75E69040C5DE04C262927B95C4FE422
07802DB673B884C4A0ACA49E7D6A7C6F098FE0B94539849EEA054ACFF5FE6BAE
D3CACE1A07F2BBF3BEEAA007C03773219CFA2E39AE77710DEB9DBC4745667E4D
D49E3E0D11863E99CB3D2C7E4CED691015CB331428CEAB48D5FAF80ADBD7FFC9
86A7EEDF0A75E41BE07D6333713D2FCB33C9F0406C6D739AEEB5CAAF3DA13B30
76A0FDBBD8C0241B3D7FDE0DE47581B5F2F1CC17F49CDFFEBFEA0064DE0D8E74
5EE203294C958BC4EFE50A4892232A258F0253031B80ECD81B4ACC90163F0786
A191E81A51C066AEAE927DD42500510706425CFD66E5EF9B0DA07D516B8DFC55
6B4647EC1768AFF3D9476D66AFA78AB7331D38418FAC688ED27C14E3C45FE8BB
E2B9737D2F76C2D1A54FA9FBE711D593067199DCF7C4B66C99AC296B7B332902
4D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4DE3E3F6222F
7A252B780C86447859579C68CB718E5D2DF0E1ED92376BC59DF277D9AB60B5A8
3AB2E7A835A8B2EC558D2D96D8E35692C26F860B13161906754C83AD44C7EA0A
22CF295CAEE46A0374E9F38E0D22A48802ED75DFD7CD2D8A4F7956076057CDF9
0CB90724944BF28D977211693BC13BB8DA7639A7D6CB1E56A91677FBB27876EE
9177D5F9BE6EB44CAA6584686306B4FF4E3C5273F2E6E83A354A8982FBC485B2
1EBA602DCCAB73D83141CB78E89FFD743ACD5969A0F940C1552AFCE6E31E8531
21C849D9D666C3CD407895B24ADAFD6746C096C0457BF07183D510CA3646C110
1D68B66D1E8708E869F226D00D39B858F6212047F35AB6A2DA36D1B6F663E272
48BD97E9D2807ADEE358FAD801DB994350171602AC8C1324581C7DB07B0AB40F
2F50E77B1227C6A2BBFF5C4B32CAF37DC23EA8B8E1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 14 /ffi put
dup 33 /exclam put
dup 34 /quotedblright put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 92 /quotedblleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 124 /emdash put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BA8B194E613047BF469C7B4261CACC1DF1648E8A86E926F8702B5ACA
6CEB4E3E85EF23EF5C9C53097F3BF17243B8D4BF0E6B0C5982FD14E4E916D363
E265322DF0823E9990F966A842ED69BADFAC2CD1754FC84C0FF6750D2373F997
362DDA16A0D73B178FB7B67307204AF174AB871C254B8E7CD77058113B702B2C
13F341A972B67756D65C6A9F553C365E20F0BA59F8537C88E0C13F87CEC69C9E
0775F760C4EE10819388782A2CC2E9C000DCBA76E4EFC7B390E50611F3D4F6A9
CE60FC3B742F046E84B4A302F5DB51092CD59F103DEE2910757696C3F131517C
467E54790062892C274817774286E395ADE501E6904329897E24D2ED60698F81
E94C25DC455B32C812F0A565F03E8E9A2791BBE36FA9632BED79898DE54B5C9F
445E8F64F293AC397201E04A676205A3D794B7D2A55C17ECD7CFF77678EA9158
9BAAE95BD4277D7093685532EDD5979AAA0E39384AE80617281D7D8ADB039C9E
DD4FD802C245A317CEDC3EE9E5C0BBB57C59EA520D6B860A2F539C91356A47E9
01AD593A532671C602DFF008BD50F3A7176453B4B7F685727172F659B9869D06
6EB184FD390E499DC9016C341759CD121D1D07F6024198BA1BD01EF1CA8AC172
28C09594FF3334B2DF8E9FEB9E954BF1E40330D6637725364396F37130C0E488
CEC4339C9309BBA8B4AAAB022AAB5539707FD0D846910EDF1E30DD29C490C638
3D33A7D100475FFD5F9F0F211136A99B973D833C013537415B6BE6EDF7D1174C
CE8A2C7DAA180ADC6556DFD234D3BD21801BBDC3D963E6BD12163543362D8CF4
52F56199E0C6B51E64128830197F6CE19A4826A24C10C2F520014ECD398F16C7
D1C39F8BB65B115E46DCD7687F279D4E44FEFE88540BB4E32272A8754639A1A4
D3F99BB86362A9348B93096999887AD4D12DDE2E04F85FCA2D7BA2EE3115D7B8
EC3200688238C3B71589870CB0DFC26F61126528CEBA5BB0E57C07CA30617E58
F795076201FCE2220C898AED66B37BD4E2FC579887F3F806F92801E4CEFD6399
F919F15501915A94737A1C5F1F85E38C1A968AD1297A19420DC068893C69E725
848D792C31C37AC9C62DC5E80D92402EF6A25A743E0FB50B6C5DE100E535A66D
19C8B56707E9ACBD482400F79B0D0CDAA20B84FAA9A2DDD364F7FC6F332769DD
2021D9FAD4941B6D905E92F0A0A9CB4B9578B1BA64636602568BC87422F32668
CFCD5D7980FFFDA35328E5B02094230C9955F77F4294DFC9220B09A4205CFD19
17BB1A18688902ACB111BB6302172FC02D494C9C1529D562F17A7FCC21D94CB2
307CDDAFB9FDFE11D1801104DBFFD1AF3ED4438C9FCC3FC44BEBBA2623092D03
F022D0056475B498BF40232D56DDA60AD2549894F7A883F41C2363C09AD7143B
F2544BB4B95D4FC3761149F222FF1BE28DE2D87B5599FADA9FCCE8F7AAE4A9B0
AEF7E6F83DA396F2880B6CBC74311C7F893F5351D3A0B3071E8667A636B013ED
2312CDB6885A4DA21B1E3882A998E8D70065B6731C089212923FA3708E99EC47
3842788FD77C45AFC3B1B94B98A449EFC9CB8657BF56E6ED2CA3D002BECFA7EE
D52C2681DC6D00BF00B0FB68CBFA6BFA6E951E9477F4380EC54A794D3F470F60
BBCF4F13A7B7E1887B62C861ADC4B3ABEBA9895FCD29CD4F7794F69EC6994554
AD80CAEC74EA3DFF52E716D004A44ED25E568EE4660E43C1570DE918E3EFE99B
451E02A82F79C13831DE55C16B8797C79BBD5DA1C787E47470280319A17744A3
78F34C41D6F2C8F2716CFA2990CA9656E3B7129F806285436FB80D815E9848BB
2EBD553E94BB1574182189C342EFD86A2F6E538D2C0C5BC8E96C0AEC43CEB8E7
1E17AB2201B08B03677F044AA5F81F55A1DE5CC227A33A179B1B5E085C5F5D22
BE584FDBD58D197A3EABFFF8ED37A11C9D7FF7BC9A4A199307E6B8382E994F72
F48FFA74F23BE7397F1D1DFAA892A36B74CED9293A1F07E7FB0A5C875B4A91CF
C02CD8CF1CDFA97EB4C54E8A9BB14257531BD47D08D7CC88A286152FC729D088
88B490CCB0072A5AAB713905C9D8296884E47AF6C7EC9728B50AC2F026AC660C
74180DFA818B8FAA6E42EFF65C5A5282164F8528696B6FBC3D484EABA26FD8AC
46564393E3E1EE037C53877EA33E54C490BC0FDC73D6B0991293155F41E34E4C
E08156835D089905432125FB4B64DDB4CBCFC6408004EAAC6D0FD209AEDC5A5B
3E9E4E830A0F821CCF8E0E14657EDD7BAD38189B3E4F4605DC8B9671F5326291
BD2CB4F573265AE95FEB2246558F4FD781A6D51A144272A9EF36B44816822DA7
5D8CB25FE8F15237C9CDB09D0D2AB7ACFE3F7C3C2BDB3E7130EDA461E99F7EF2
4F3DAFCB7CF5C58F7EA5E74BA6DBF131355815A694765A934E22F4A4BA1BAC67
0CA92580185984F9A2A58B5EDC01AA19D0F920B238457DBFD7D96B64B9F0DCCD
74A1B0361771DC4CDB3294826966C3A4E0AEC38DF43359DB2A42DA4C9488C7D6
991307E21C972B51C29071E092223410E7CD58A7A39DC01C98C9DFC8BBCFD4B8
5A3C1EC1E770BB9C4CFAFE110CAF615609B0EF4946A77CB90B8E18735CD722A2
1249E222DE3DA196FDCCECF22D7EAF720C2E3B7DAA1D0352051214AEC28CF8AD
1F4209E0B157B80C7DBD416EF537F5CBA7CA97FC08E7A54E6B32DBFF5142975E
68E4A8A6A6E6C5A17293C5CE113413AECE1EEFE397F7968F495DC50920FAAF33
FD05F94DD9A8168C771B3A5FDC76B32DD5BED75712D27B460AE18EE3E6F4ADBE
D577ED5D1927A26960ACFF8E8131BF6D577799C6037D38357330F779027F946B
C5AEFB1196461B6D4DDF76C81AEB1B45FFAB9B8E97F863A0B3178C254278751F
626D60C00FED363F48AF05E55FFFAB52D3B44120489B49290301CBAFE4FF6DA9
FB13D7E9E1EA0F3A982E827F14FFE6DA89BD6ACDF53A5F1AE153D31F49E2CD10
60EB8365476B24BDFE5E6CCC41D0B3DD67F1324C850E4EEC892050ED1F2E6B7D
D509280AF298ACF61754AB9ADED560D5DC5976541835053CAC7AEF23A5971BAD
4E4C6951857DB8D99629195E0E7C7010FAA26AACBE97668012D81AE525BF3EAF
74F763913D48D162EB24DB1753A51DD41F34EAE087CB9E538A47DA3930EFAD2D
21DB5EFEB60FA5C912100DF236BA0F99C4F9E23CC1814AEF34672BE7D3585EFC
F3BA491CF85BBC651119EAAB529C861B65D8FA2B8CEF4D1E69267A19D716A78E
B831A66C11EF7767C43B83CDAB140180B89DE4FDD0AF9392E881AE82B88EC56D
2F22CD69B1649162D8A1C5C57A25DF50A60E88A0337D8760043BE678E676D2A8
2F237C06002336341332857296DCB55C0DF79681F99DCAC4534554A45F4983CD
AC0A062269718B19E1F43A2C652F90213065595EB3A5BAAEAD4AF03B52DB25F9
3FA495FDC7242CC649BE5A93704439919C23689C8C76F55DF6CEA60EEB502480
DA0DB9707759DAADE2BF9ED908D9529C1EDEE07A3B9E1A7EF7C13751E111FC30
4050B161E7CE691D8AF43D6F52D35A513BA5CD8EF1978BFD691F75B036D888F1
50BF69E65112127A899410AC4A7A2D1E6B5DC97B7584107C1DD43535AAE9AFDD
C9E94D81069EEBB5F8AE5EA50381E45A833CE766E6CEC14887705A16F57DED46
8CCFD55940887100C8D5E1206B78368C73F42E63AC3770C8F532DE089C365A24
9B14F713B208C631195D35718474521E1801D227B01C69052EB8BC5C31DFDE3A
C34A635744BDB1719AF5EF68ECB20B363F0AE9793F399F03DBBF0AB8570FF598
CDA55D8564530F343D0F7AB9218F04C67D6E3F2F3A174C865C30330FF6F6566C
3C923AE331D6B560DA5DF1151CB9356899BE89EBD841228A5FE057A272009C02
CEC8677D95B3CFC718818DD3610F20A7C98CE81AA8433D5076660078C786A678
621614DA0ECDA604475BFE0A3CF9D807C8E59D7DCB18C56DB3D819F46581F043
6A0FA07CB4EA6AA1BCFBC1A2BB0B1266C50F119FD647CDD9D0018A28CBFB0728
EA1AD51F19E3405CA8C47F735035D91A1C31C12DA65AB3C52DABD51DBEEC754C
336DC02721D267B0BF13B206B3F21C25D7D1A07D99E4ADAB4A452CDEDD8FA12A
D5B616734A0D647E7A81CB4E21060219D48D1B2D708ED968A02FD89725E9A2F2
3C39834B2ADCE46B31B774A0CDE278DBF32E04D408FECEBA76B19207C40BE45E
765598079AA7887C112B9127967E4FD45D804CB07501EE9D9EAE38752EA2DBF2
31A0C85338D64A09A7AC8662AFFF85434EF1C000AC8E679AD7A96FB93CFB5ACF
6496817F75FDDEB5E764DC3247B7671B517178F8153044823B26EDA73C455EDD
00A00569706E955A7D2F7483B5C70D2CA11EE4B2279FA24E35D537D1A66B6A97
FA2BD644B9B3A9ED255E55C8B10EB9B21CDBF74C4569AB2F4EF4B12EA416CEFB
D91274922C9283CF46E0AB3137BC8826C43D6462C57CD5DB79399F0FA325F4E8
B6A14EB4676C49F01DB6AFDC3824C751BAA10906324F77222E8C835905063384
0CC5784B2A7BACD2A61D5B42284500D88D4D53C8CE5B5B8C84A2D6778B80AD9E
8DF8BF4316A9D30A307ED93CD0D612BEA9E39322BCDA707A61662C383D23FBF0
1F4578E6569FFEA363F9B21B52593E75B47B5304BF4261B896A2CE151A41AE6D
0D5790B14921D868F3099FB0C29B53FC1802A9855D128C3B479E283A035AF4F9
599BB915CE5E4D67C716E26A15A3A6323BE7509B8EFD8DF7D57E8C993330B59E
07F9577FB8A2CAB10CD519F3527F5BC2CE646E4DB8969021F8602C79DADC844A
EA21EA754103CB9CAD0FFF49F085FBF52AFF8C893D7D394895C84833E2A02440
37A3A834C1563FDF76A7E7445132E8BE2C05859D5B0384A184D27D5FE35DED77
47B6A87046B59BE2203B2C1E9DF8B19600BE93EAC1B72DEF7E67404D55272F92
5881FB446A106DFB6BF243B44E8E3E48C7561BAF166CB18034A128621B8A06D1
A2AD7A720FB9606EBD796CEC5239A36C80888A3D414905218D98B46BB9030CFC
2558AA5A07564DEE5386714C7679265F402BE5957DB273EE2FD4DC08BB0016CD
010943750483841F8063A5162920F12147C5AFAF176094939551BEDA679B9060
E06DA3AFA8EB598D1D908893914426EE326D8D58F42CA81D1774D0FBC769EB5D
4C9E402C1CE6D40357925C15CB57B95FF45CB7CA9AC78F09CD13BA42C5235F23
AD2CA6233A63D1E58D4DA555376BBFA8164F4B29F8742E1A10695257F51595D3
E39027277BAAC82826D13EA745A8513530C48F177F3745CD5DF824520E45E337
DECA07338FD1550739670E0F748040F1E7E52F92CFC97EE8ECCFB74BB64773DD
C160BCE53796FD3E00A29088EF67FBD6AF56DC3F03CEBFDE5E6EFFD43936D6FB
30AF3E3AA9C6E05E682ACA36534C5B6030C5F24447336B7A35BC2E5E088E6C56
525957D2C02889E199D9703B1B59E33C69523357C0843B52C9A3D9E78A44644C
0E9EF26331036312EB352B2AD1B94F7DAF8DC8E87C66B833297FBA1EE71D2CD1
33D00A1DECCBF4EE7ED0AA7EA387EE6E4928D7C61AA7F5E494E835E9B11891C3
A3D24C157CD25E407D3C172DBEF927FD8C60180543261EAE49BE9FA8FA82FBB1
6A130136CE335860C865B23740D82FC0F0D576769E31B55E88CD83323A8C793E
C41C3F1A153228511D225CFA2B8CB4EF24EB5BBB664DBB05B8149AFAD5E59751
49C0958DEE91403AB4D712BCB54271D5F2C12DFCF113E94DF638B5E4460C3D3E
D0DE10A568C069849C8B42CFFFAABD68FD08CDF6D3ECDE8ED9D5D6F917AC32BC
D467CF281C3E4734A2766B01CDE143178651016336C67B214F4C8A51EB916A37
FF9CC7F28C39E20B006192353D904FFD47E675DC10E8ACDC8EB192B5635792F7
586B89D5CDCBC45135A41448ED5DED2806B5DEEE8E26932D17E7C801BEFE25A6
E72B9748F742C9873CA2A0C76403BE7DD73EF6754C47E27255236ED688C478CE
C8C34AD5C912AFACF43C6649B6B3E91C755B49CEB5123205AA3F3D574DDD5316
C5B8DB52E063E97DFE9FD5CD5941C5FCABC7E5C33915784854527134885B8674
510392C6F953080F3C010DC515B489C3A81778023D9433FF88AF224039017CDD
BDA0BD5336EF232F4AE21228BE301B7C324DCA7C4F8372B0C581F255C0544FA7
77713D5E81397D229F4338D07FC56A3EF58E9E693B4541B044BBBD0D93902104
250FA6137D79FAC107DC39ED29BEDF1237930873F4BBC7567806F9F11DB56CA5
584740D65A6695FB5C110B5BE7A1D6C04459D5514AAB79F600928F94888E8CA1
98BE642235D0E9FAD101C012A02FAA500248560436E46E7CEAA4447FE508F0C1
45FBBB9DE2D11D0AB3273D037F3EB9864F6288FB8D989226B9F419228BBB42ED
8818EADFD722F83EE369699BCA793C07A25BC11B577054A9A72A4895102BACB5
A39F1DBD918F73AC2A48785025B8AE5DAD95BDA3132BE442092204C87BAEB6D0
55DD409D2526756E5FDBE26886044D629C1BB21A17E521882A6A39445F987E82
20CA80BA4F4FA5299A9879B5F341661EB983C55CAC663AF2B8B957ABBAB9EC89
6C30E355C9D62E5CC8142069C2F1502FA572B8B270736E1805B6BD166489A2FA
9BB33CADF00543EB5A972ACBEB8F4C2E343BBAB57875CEC3E18CBC0178668C72
F0923A777110C4D0D0F16F6ADB189FA5BE074F9B0EEC3B50D437E0B2E6018F1E
62FD362CB39CE6F220314CE5E3D82D6E1A60472E1CF629ED03A946BB2032F506
AFA9EF089CA5503C8A7743C48A798BE253B0A31AF7C58B5EEF0C26C75F7DE028
6A7C920A737373BBE8337DA21A2B48AA82C6197AEA211D97EDFE25B9F285EFF1
A97A301015F96DFD89B5A3D729866E8427D50C824DB2881E879002357998F790
5E30A454443B43E9C16CB9AAEE768CE72265BB4DE936EC8CFD9AB462D12ECA82
621E1AAA83A83C2C31A210ABECE639A6301DEF2FEB54121CC604F8291DD75735
38341DAFDF1F85288460C560438168C54B5A881D113097186AA5ED1126ACC7E7
2752471910F685C2BB29D354997CBA70E3644CF4FC692B8EFB2340F5E8DBF8F9
DB1985D729202607935117586A953B6FC4BBB273AC83993472E348407CA61770
59A6CAA8AB99BF0B06CE3A91F7F434F93B3E15B3B3D8A6EBD1F33061192E8FB1
BB800183CA002DA98F2596DA1131A7FFACCEEB54C5E9BF13DA913CB363025272
BBF6F276B254DBB47C4BD37F9456AC7613844354088368DBD9468A6ECB6C11A0
515A4721C607A127189CB30585B06F71D609868FDBDC1E2111DD733438C5B7CE
B886B751BD9DF9036C202442FD8B58B1B6F499234152EAC5BAE42FAB1656E9E9
883AD7D05E2C1B0D89D86A8EED18DA2079457EC50086BFEA54EE1E6F7D4FCE0C
B224AAE2924ED89E73F341E1E34DC188AA6017A90B05F3E840E4DE4F200D3F03
9ADBEB9CF96138C9E29736F89A57A2AD03DBDDA9DD4891FCD9D5A951E7C73152
CCB91087E2EC71637E2AF81EF85B3858B7B7F7C8FCBB5829346130B690B23B7F
EAC970AB511FA32F203EE063759FB0D07C4D82E6657FDC9AB8E28CD3ACDB9470
18203BA9A9104F4D98C9748FA0658D911C81B35A4F3DBAC7B31EAAC97441C582
543419CA5DCC640DE57CFBF11077A61A954D686A813B42EE6F4E7F1A7787F983
B35A5E1F9051ECCDDEC6239452E21DFCED88D554DE3EECBC000BEE11F95DB785
AC2EF78197E8C6B00B952CD28120B894E5DE2C5F86D23CD3ADA77909BAC5B2ED
504A0877CB81AFAF077BC895F1AAD27115C569DF3CB7AA5F1F508ACDCA7DCF31
97B791848FDB5782566FFC062E66DE3EE9B1F2848DD366848B05DF6350898698
1B4AF63C028227C4F7989B5D6DD5900B5BB7692260320E2C9D0EE27A336721BA
3AAE851E62B6A31E00476D1FE67C9E8FE86AF39C6FFF698CEC1BB10AF43D121B
FD27D3AA8489194558AAA8FBC187D20D78E615374865CE60F1B97EE3E00250AD
17A76076C473991F6D4019D68257D9084336E69DC7865995A104D5E11CCB8E6F
1DA9E0AF1CCDEB563A0957CE35BB24F51F9AA8E9D17D0AAAD3BC29BFBA6B0F41
9279BF228F50B4B36AA83609FC24A3658D5538BB4F3527AA480E850241C0F5D1
6E49A2705A48C29BBA4AAB78795032700775BA18A4F4ACCF535C2692D134AE2C
DBC56D92C096C0386F12B1CDB509DED3AECEAD09AFCDEF568685C960FA64AACF
78E75CF3135D898832EC494466A401D5171952CAF1586E2EE5F030D6087EE92A
D967BD20591F7C836B1811CAF55472003DBA1A76B8C8ABE2C3603748A11FA29A
E898617512BB7AA605E170F974C5AB696DE2D32D86BC60754A551562D654D1B4
4451ABA396150BD9DDF0D9BE0093FCF45EDE4AE6F2D5394057E6D32A23A47D9F
1ACB7491D7C539D2A48BD8E49C3B195D6B344D4A6A2BCDF16AF0E529D0689341
1580E929E6301FE74370E728914E3E7230398D5EB3064AF1E04F9296F4B8AF9D
547CB9B173EE900B40F329A8BE46968D2FB278005E64CA4A05FB54876DF678F5
EF4C77297F46FA6789D7727B03C3C5D29084F674ADB8D603B89313E60900CA05
ED07CC985C7985BBD211A089FDAFDD1843799E8535092CBB037F2619E854DA56
0251B4F555BDBF70DEF8895A4F2AB70A7166374C95C78077C477B2E84D0119B5
DB7365008F97AD7315ED5DB4D8FA0C941DB1071000EF761F9CB77AC5FC61DA71
8F813B49FCFDDD6DD7D9D76EF13DA12F81A57E2B44FB59DDB00E563884533867
F14E57C00768D20F654C936BF0E693355EA5169DCAA9C85BC82DD09DFB1621A7
49C954381A8FE2C742C1F8DE307E90DD259B4CA153E443DFF72A49CBFECFF786
03B34A10C603B20E179E0AE839D65DD0A1D653E0E4894B3CF472FC08147EDF34
FDACD13BA69C776FA9D86101C3C2D280FD7BE06C72B950572CFA9E8D040A3E19
B39E158350039A47DC74FA98077E44B88896C72F8AAF803F033E225CCF99AC41
AC0C1D264EC46DA48CC9FF0C68476F114F1BA2865A52C5BCA96BFC710B3AA091
2F2EC196A101C599B8A28B8EB1B25F63D0857B6439F31276765EDA90D231801F
F64D144A45F87D53859354CB60DC75748BB5C5EB5387F2FF97DB5F156D6DCBFF
680815FDF7EF4617089EACCFCC455C30EF27246B6332CC468D74F8EF54C1EDA3
92C25BB45343B45E35A5301ADCE821E4F50CF2B47DD82F8F821C488C6A5E3EC7
4015BF94FB9FC7FE6168E4E82689F5D29DEB31EBE940B011F75554B8E19B9092
110DCAB9EE02799845B3BC29E8D6CCE43E54D6B43A9BA1013C60119E1B7096C4
BCE5D9AC693CEF16A92106B4CEACB592D4AB0F4C2492925546882E02BE2967C2
8D60C9827B7AA398BF3BA6016B2ECD74411CDDD7C0AA96660CD38DBE0768F081
2275EDE05A30E68BD2988F02A0799FC0492F91D052C7423ACC2FDAF48CA1E5C0
90782EBBD0AD3105EC52E852A335985601063E7C9E15B97F1364E50F327EEB44
1DD6DC0673FFD34EDC0420E5DE91B7D7D4DDDA31D9110BC611F2563BBB53FBF2
673C565C98F219EF627B88143667B56F814A194F3DC346DE442776E4C967D7B8
28B407505A0117F19B5B93E075AE2823819CDF70276F62F87DBE9C2F26989DED
6E174367750FD972F4E0AD6E97622BE3B6650932AB3EA1FF89859C2B245A6327
7EEB86E1D36510C2467A27C247CD864C237C322480602B659BF7B33AA48EDB87
4C62BEEEA1F71E5F17C473CE19B706597D399E4D0FF61CE422C02031FAB374C8
97A328F5EC4E64B5E63C141752CF82EF4BFBD99601395B7FBDA3F6989B116E62
00EF083A1D5E0203D2D7BFBD3546DAEF16F37A8762621AAA3F961813640FA9A4
3A3737D76A1AA3A6D4FBB4BA4694F836C6A501A23EACC3798FF09D1CF8477F37
3118F7A12960CAE1C6DB737CB7DCBF91AC775EDDC7DE12E0FE9A0D7CF058C6EA
C4E1FC3792975E09AFFE56436B0941C34DFF0AE94C2A910BA9733E146681CD39
730A0D928D49490C9C828A0069ACBC8AB2AED5C3D65C7207D69F23DF1C43874D
F3249AF89AD238FB4E7713245B599961E055A8FE49BFA05732D234D118B06748
6110E900FF90EB92DD6F3B1A309F6E57066AE37031D92975EA9E9587886020C9
DBD35FC19208F7E0A438E82CE87AE6731C9E5F8020096EE946340BABFB5AC215
2660BDA789B7A12C930A608FD778A8184C39E66B3A561FAA0962580CC44B989E
2ABF9708148E3F9B3741B37325998BEEEE409D1DCC153DAF8101363FDB022435
651486109646EB36970CB01B9FA2C14020A51EDDB35A536B2FDCDCAC4211C89E
80B179C9F2ECC3AA09A4A399AE6863C3A1DDEC21F901D0639249C2891062DC53
C0E07F8A8390D8AF97D115ACA0440B579DFF5C39280CCDDEDCA40BF3B64AA6D9
82C68025C6B149F4D5C8E4AC19D10779372CB524A01FF4020FAC26992B66F12B
DD20B551200131F4EBD51703F5E1ECCD2F65B27EE4EAFDF181551702E9CB1DC7
8A49C85F70139048B948E9E1E92A4DB13C787210E064A810488F1C0CFE92681E
7160222139239533F128D6EBB5DF2FB5B11C5D3BE9C537510C756C14A4D1369A
7FD677184CE1388900CC4533CDB1E59EB086FDFD69A927E2CDCEC53F0A560B26
413844BF6D434284AA1899DCB6262FC3F410D278CFB4127B30F83B4C1A1DF683
B567E4A97ED580A56F8B35FD478A700FF992926F08D452CD7FCC83A67F83B716
8B95F455C6F7BD398C4A9B84EDB4A219A78091772408C390D8740E2812E9DC0E
216BB3D49CF454124E3F5F04B42ED483A557D5368A5B3F0F5BEEC58B896B1BCD
0CCCFDF6D4E9AC208BD27E7B3FEC8C905BC7BA36C12B9E7FF72729197B064024
0D6923C16F09EF8AAE513D44385AAE6987BAE332031BB8BFC394FE25BD1ACD55
9B5E340048B94064DA1B9B3F844B34CAD98CCEE2F09E3A6CCBDB323D366B15BC
BC0D8220B8BADA82934A471A0E55100690E9EC25C9C8D3A046461980A41F5D41
5D33CAA4BABAD3DB272A1BD61C282B562B2211D6E6F030EAA4F2B83773971B33
3AA788629C3B4FA3956C1B22634F996DC245D64A08E5C5163DF9C8DC315A1495
E46C01BBBD3749B8FF996327D484CE6B5BC7BD3552118BA6EA06EEDE1D20F089
602EC4B0F7D2AA7126729F6AD542B2B06EBDD9FBEB16B4A1BE398592C15BB02A
DDBCCE54CE087ECF58B7C3C7C137B37AA7CDF9C21A487B22EC17CD805D453F9B
E09308C1CFB09EF389B384B598EA7DA22A747006AEF75531112BA5FBE060F04C
53522CBDB4F720148D084167D74D3E6D67C3331CED8C5B8A944E65F79CFD9DE0
90802CEAE2316CAC167D2D8C891545EFE2E3023B61C1929C41EF3713C1F44513
6C5599BBB5D1857E45ADE134288AC94418F917579107F08A5C0C1DF680ACB9AD
F774C6C73BC8D889190049A4633D71BEC89E092AFEB02CFCA7F76CD61AE5B5D8
5FA66194B002732B419152EF60EC46DF25FC75883A550934422311386447A17A
D3EB29A6864C61C0A970AEA3F01D0F4240414D4E9301DFB4D590F1161DB3704D
7F9F32154F3EF3982AED2274525086E9D73856D40188435A577007159B601063
A85ECA0048631927F7220ECF48834D56151048FF83C68F8DCFD5B22075B1BFF0
5C9969D39A8D5AA7781FBC2FA556DF16AF962AA407D4AD9E04EE9377C238DA20
D1375C7DA778C355AC7436256993AFDB2DA7B8CB8114AD061A8C40E8BC1F1843
1810814A2E942326F2CD15DF6755E51A5940DF54436FF2CD080CD154A8E5CB69
43771D27CAB959C617A7F742B210725356AAF9CA603DB84291A46EFBBADCFD7E
C41425840C5D5C06FAD20F3985F565BCE4582D893795A2531B564060B0818577
FA943DCE7CB770C0EF6FB4067BD3D451EA043BDA3A8391CD46FA74266B128B8B
85C8501A949E84C7E46C80734B58CEEE15F61DC847F501456A47264A599AA71F
BE1024E4084B6F597DC9D544C7DCE3320F786F610BCD91CD6440609D3B8CDA3C
E0E58661D295F283F9DA850D67BD986819DA50DF4EA90AC9605CD69AD9460107
5F76E6CF31981FD92531F89D659791EAFF0BCF607F0B61B72A148510A04E0198
65EE0D772FAC7566FE6261277B9663112AB8B1A41CFC8CC5DBE1EBE1848CCFB6
6E8F6871549678FCD94DB90A650D81F9DEF4E4D4E441F249991E8C72D83635F7
396A48463C71D5FF5D24213E433CBE4E7BF8D03553C013D428EA2112E6A8E598
CDCCBFEE03D7BAB4B0F692CE10D9C2322DDD021185B04BA90E8CFBA2B8C466CC
E42DC3989AB14FF78B837116100B91ECE54A56B85190C9260B0C0FDAAC72CC82
B107E3840FBC6ADEF6142BA52BF7FD8C812ABE5AD5CE3E24E1BEAEC5894D04DB
04F859CA6E5910A1194440CBBD8583ACB7BB9523CC07C4476CBB150F6E4E147F
115C5D926255054A39A23E13A0835FB74A1195793AD79A9E7FAA827A9F4AF8D5
C64F31F0A6A355A03BD8256D1BDAE96570FA9EAB79279C6F001BEA30D6D81CDF
F8C98DCE985BFBDDFAB7B270C53E103B2372E342BD3ED12D39C0C1224E40E03C
7004FD6BCE635C7941FD55540975C3892C9A448F13F9DA61D6D989E599EA791D
C80D99DEC48FF830E543DD34B2632D8277789E70820E40AFC300DE6D361284EC
DF2443E4DD885C743AD4FC1E2CE3CB8A8DE351D7A33ED3A594D171F6DB13F80A
863822A3DB7FDB1942195A7DC5093F0CE4CEF18BFC82B86330E0420820224C0C
F95A30CB702C0875D16189FBBCD079BAE45CA9CC59487A7746CD3234AED94B54
48C606124ED15373BC4E8832AE375ED768423892EB4B78119714AEA6F9A6020C
F7FC2CDAB1A70898165E563F7D4EFBEB8B057248657FA01D390E6101A4608365
43176622918630D9F68E7C17A9238803C0D6105AC9FA87E23A872B64FE2D0BF2
4287D90441F4389F94EF02AA2DE4173AED88EE0C49FFB1A5D7A31D974ED97941
38C4F8228D91C82AC2140D2F531E2177D31C24E67A5D3E25F60EF632230A7F47
08FD2C5469DCFE836AA869668827A1DDF745FA0565309D1D7FDEB2E74677CBF5
6815AE9A395FB5EA072EE180CED3389DAE12441DCBFA4871FDCB976A070E2A0C
ECAC2FB32C4466C690F9A57F08A0DB443B5C740E001B8D999FB9F79AD3829010
6F2C29FEA48C69CCC91F48747906D9257A9BDD5A4A54E00B78BB07E0D4A5DEFA
D01D1C0A52ABCA1813F574D21F90D67E8C1ED62C623F18E2C55CEEBB457C847E
B969FABCA782299311850E48A93E2C75068AB658157C23531EDC9892B3D79CE7
8E75A1F1F43B9D106D2AF3699A224E2E29B41C3BE238203621AC611FBC6B4970
5E875DA387DE67E019F1CC1C917F5ACE899BB06F255CE0465FC49E629B6B3161
4839A71C3B5E90BEF2933B5A06EB17314C1A30077B43A5CA9946A3941CA558CC
642029F38E35095CA02E983B77AE3701A099BB2EFC1FD3FB8EFB48A5E2B7B4A0
4B01608797EDC283C8D2948CA4DC0705BDCDACDA2D6E20CCB264A23FA1B64449
1224933C108CA45654E49591813EA3AE5837F1A4E38CF791A8E52BDB4289A4CC
648336223126C1631D7628B49BB6382BEC4FEAB5AD081F4BC90B6939EB2A0F70
4681BB55E8315F3F3A52E08D9FC1CE11E729096A05AC954683B2AB83634FF8CC
742A3A7DDE0964DA0E411029C88C4D75EC6E4F54AB8769B91BD147AA2DCF74D5
67560224D02A2ADBC8BF9BA9BC07D663FE197FB299E2770AED3DDE2994C075CF
8656F78EC8681B3883CAE44D15FC57D949714BAD20BC167EC93373E360DB77D8
1429B711929723B8F3A34FFE463D8B6AB4CA002309F10EAA5A38C901625F2964
E1B17BCB36955FCB9FB160C0D440A462B7AEF3618A2F6651577C86F226160C40
1FCC2AB2F85B4E931BA38E154F0F07218548432CDF4E956FB0C09B8E3AE1F9B9
7F5E4B8387215F67FBA5833C60E833FE8F175AD81B42EA97F72553AE24B17C7D
E6952B895FE3AF80DC36B557B454AF3951E2C11A6AC411D12936DF6E36522FD3
01C08F6D8A361D91DF3BCC5A6A63E96AEB9A2B4E11377E8DB20D0C20D3147228
A07318FB52ECD5F17F7A2A8BD89B015A52F58A4768424FE0A484288112C4EE45
25753D520CC8466B6612049F4DE1EB72C56DC82BB8FC8212853A61345B3710C7
195A130A79F157BEBDF341B84BE44790A6A75F916A2A6CA4F399649BCAE524E1
89658A48EC5729B23A9B83196F4A30F1EA2065BB6D03F0AFC35C7F0F6EBA47A2
36BEE64445C42102E02FF6FC60FDABA3C8BE957175625FE531C13F9D067C766D
150056DD565B67D333DF616B07FCA85B273EE53EBB84B79AE3B00C03D5234789
B7D2F655990C7921FA167E505632C62FF36B670A790D027C645FAB8E205ADEF7
D838BF476991F1D43F56E09D00E014AD7DC54E0AA28D977EE50E7406A1A1ECE8
7C2F8ABF13E06B01CEE1F063C7B68810BFF79BE2E059D768E66494BC1F50354E
4803556192570A88DCB36BB16B3B16378FEC9C65BB8572DB670442F8F16200E1
6A02C07E0705298FA9BC5D61D4B4F696C4C91F692F64FF0256BA052FEDA4DD98
37BAD6F5846B9D199CC4122E39B7ADF71831076D49F44E7778AE5E03606DE59E
E0D8D358F096BF76A89C6A4475E0A5F9F207FBD9BCBD2B21B9C6AF8733E74971
B24CFD0D2F20CE33F77D7EE2912EA96C86C499409A6BB3F41F98FDCC1B1918DD
219F5B72287408B3265C16B34B5379290B73C98A18CA6AAAC3FEB70CE4F65D44
53EBEE19F436A6C949BB80E180D486FF1A03E999E2C27D8AEFDF3601CB47683D
143B59EC6D5BBD0D4B62145E4058DFF7CDE3C0A08C1779E6341EFFDCA8467872
55894C17CF476EE5118C210DE85AF8022186AB2974278A40D894C7B674518811
59EE10575055EEE54D4D44D751F1EDD43E16E1A3A3ADF246F90D19D35FA22CE7
34E583BAFB9CA014FE5D2014392AF1E244BD5A49E987E0954355E5B57F18D39E
B136BA0F96E533989A2987E7A5CFDBF77CD237939B3BF038577A33EBF7D4643A
E0BFD41EBDA93C50EBDE00D257B95E1BDE7068E7EE2C1033A1A8A1D98F4C3391
488D54465A013E69655F2C13C319B0C22751632E2661FF0FB01091D92468B852
336BBE74B8E27BF9D1B7C41947FD302C9B21402647B205452916FC893019522B
498B1B5583627C91C03656368AF08A071EAE83871BCC4D16547007A63E86D512
725BFD4598248625E9A4C3FE3DA94D1FA27A6708BC27A986E1758222E4F03C6D
2A6CD8B8EE4849549FC9CC288218EB161FB563526A1456FDFC4C509259EE176C
D07B721CBD2AC3378AF8BD9980198948B67B4FD2E36C39023000B65BB8BDD575
B060317FACD73029A68CFA4A9368ABC198975C4C4CE7FC2783E357F48405468F
AD453EB597C83C9BCA56C8D54A87A0A0A9579F7A9419B02378D81F8666DA9A27
40AA2B51B46A4165DB7A7753383DA498530EDB1D8BC142B7D3CE6E66449302F1
C011241C5442F6E39B5E6E1FB8DA70AC7966AE10B19C98F6CCCFEDA781AC1410
F067C9594F9333AB1489DDAD5F36B090903C25EDE4EFB4310A187C5DA248EAFD
E6EA54F7BF395BFC0DECC0631A8174D0D7BDDD17B8795C5A478C3443236765D4
92EE6AC15FBFE35C63978F86E75B57AEDAD9D7A0F04A8405852E07B7C72A2CA6
8FAFB17DA07BD18E794E1C8E25F171DB7929E74C6ABED47412D008D59EC97D16
F907CAA1321DC26A8EFF3036662813F5E4CD228F20ABBC82E1335E6AD4CD4CDA
B0A1C273A90CC0916D4233ADBE2E76A80BCCC594EE7AE43C13383A13551485A3
08F23057F59141422C8A810D6A7DDF3BFDA3D5F044B267C4271ECF3FED67E74A
44D6AD371CAFCDE778757BB31B42BB891D5953EDA42E7C660E220E160B3664B2
3057A42E64080B2EF376E502EBE8F4D4E5ACFB167E70FA3290CF316CF2EB06B3
9333F19A7BC962F3995418CC19DED60C6EF499C0EE0D689E3E9C5C656BBF32F9
CB16EBFF10543C2BDA1FE4B4A75C8ED54D24D13F0CD25A0A79D31101EB17BABE
211A9B0A64514C2E99BB3EC9865EDEA644728EAD82E9BA3DA1A7766A57995989
7B979333287317DAF451B89962BF2D98CF44610F0839B918E3FAB047F51B6F6C
C2D5987111F86A392EC593171D3D58722C6EA986FB9DC81F51CD953127DB700D
736249D81124865EA6652ABE3B767AC6A736A5FC88A992F7DFA2D7BC0DBC23EB
5E8A154A5BBE00BA0A0AE496C33FD12FCDC9F55E7EDA15F53EF03E548C54C3B8
3421A9C38C1EBA3DEB3EB2203ED9CDD5F128DCD6C4CE84A9D9EC617701B20AC8
0308FCC237AEEDF7BCD76F68F1ADB73FAD90F8AD01C09EC0DEC9CD2341CA641B
F1B8F0483577E33D4031FEBD6A40CE2FC111149B285FFE4E6518915B8F9404A2
8FC794B6139D795FD72B2DE522DC18113B5F1287EAC282EB0115CA30067768CA
6550246A301CA045AD0907B99DF90E12098FA29597BFF29FDCA6C2DA80FC617A
0393BC3ACEF86F73A0F93F77A00A5C89291D2EB901C57E6BB7B7D5571B07AD94
2FD559F685B66A3251BC83DEFBA909A22E5D946B63B3DEE58EF0657D4A58D7C0
05F28892E710CEF79D2273307E080F189C7D08F4E2A93113BAD2C022BCFC9B81
DF149F8868AF889298664F0B68BBAF326D75A102505AC8F7C040350C6A5C94C6
1A4C7DF028F17B24F94DC59E1DF8DA491E0A06E707C4F2DB6B251BF9E666A61B
653BD81CDB7561C40FC6330A35A4BC46C4161D58B3860F289759E207ADDCED60
0A9F91496AC5C9175E7786EE41D4E5A0E2BAFC1B6A9EA117EDE6A75F00B15D10
94B7D2B40506474254B3790C915E59F0E73C8F5BC5663E83DD752BAF8495F6B6
E094D9A51004733861522D58D185285EC47FD28EAB6842BAFB9AB6B6B1131E0C
CF334F08D4B706B3544149342FDEEC3365F8BA77EE7ABBC14F25F918814DA017
93727EF9DA3EE01E4AA500E8F1F093E8FBCC265FE4BD20EF6F6A08910F39B649
2E86186B662DEEDF540746F79620F2BCB2BFB4D3ACF38F9AB6E3633FF5B47551
16B634EB91833AEF40818F2843B8E4ECD1F4471D0E9C818E8B5390DE554FDF15
F576E70AD4D410D24D25755A1D40CFB8D52B2F86BB6C82B626C5BADCB91D53B6
3F9669C3893A1A4CF9EB8BF50B8C36DD7B32AEB8992365A5D314507C1A88A985
22A55BD10330901EFC503281FEF2BA2F062D05942DD937A76BB135073E0601A8
7B3EA1F80A57001B141FCA6A0BB50243B2C12733F918E5D867A0CCA50B56E1D5
DD55749DE7A52F20096461593AB01893680825C9B9C4A91B2A36333A5F5D74DF
3B83EEAC489B2F45DC02ED8800053C71DCC1893B40E396068D795831DC8C1153
9DA48351707C7A91524AB87D5310C256C83262D1BA2FACB5B6E17F05477FD7F2
BD9035803E4619365DCF7D3C3A6476FC35260FB668E69622DB3E4CC7986DD304
55A0F383BCCAA5BEF7ECCB149E4000ACBAD7A5D84E4C6B6B4BABC0F3F66C8A87
C4418CD73FF637F36140621E84AE57174574ED38AF2DF93D621888E3BC40BCC9
A8EFE0AE3122484DFC339A558112F1E7AF1F22BD31C94E05F50B2C12FF279A8D
9CD6BE91642B7618535997E754FDCEC8EFF187043F171D9B23CDFB314C6D2800
752B963906714BF6F1C18E1C1F32E8C798
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (Mine.dvi)
@start /Fa 141[55 1[75 67 1[112 37 6[61 2[75 17[92 21[37
3[67 67 67 67 67 67 49[{}15 119.552 /CMBX12 rf /Fb 190[49
65[{}1 58.1154 /CMR7 rf /Fc 131[83 2[44 44 60 44 46 32
33 33 44 46 42 46 69 23 44 25 23 46 42 25 37 46 37 46
42 4[42 2[62 62 85 62 62 60 46 61 1[57 65 62 76 52 1[43
30 62 1[54 57 1[60 59 62 6[23 42 42 42 1[42 1[42 42 42
42 1[23 28 23 1[42 32 32 23 4[42 23 18[69 1[46 48 11[{}69
83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title (CS 344 Project n: Some catchy title) /Subject (CS 344 Project n) /Creator (LaTeX with hyperref package) /Author (Nels Oscar) /Keywords (cs344 ``operating systems'' files filesystem I/O) /DOCINFO pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray Black 0 TeXcolorgray -300 -360
a
SDict begin [ /Count -0 /Dest (section.1) cvn /Title (Problem 1:) /OUT pdfmark end
 -300 -360 a -300 -360 a
SDict begin [ /Count -0 /Dest (section.2) cvn /Title (Problem 2) /OUT pdfmark end
 -300 -360 a -300 -360 a
SDict begin [ /Count -0 /Dest (section.3) cvn /Title (Problem 3) /OUT pdfmark end
 -300
-360 a -300 -360 a
SDict begin [ /Count -0 /Dest (section.4) cvn /Title (problem 4) /OUT pdfmark end
 -300 -360 a -300 -360 a
SDict begin [ /Count -0 /Dest (section.5) cvn /Title (problem 5) /OUT pdfmark end
 -300 -360
a -300 -360 a
SDict begin [ /Count -0 /Dest (section.6) cvn /Title (6) /OUT pdfmark end
 -300 -360 a -300 -360 a
SDict begin [ /Page 1 /View [ /Fit ] /PageMode /UseNone /DOCVIEW pdfmark end
 -300 -360 a -300
-360 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 -300 -360 a -300 -360 a
SDict begin H.S end
 -300 -360 a -300 -360
a
SDict begin 12 H.A end
 -300 -360 a -300 -360 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark end
 -300 -360 a 83 x Fc(This)28
b(is)f(a)g(L)64 -294 y Fb(A)101 -277 y Fc(T)147 -259
y(E)193 -277 y(X)h(do)r(cumen)n(t.)-300 -89 y
SDict begin H.S end
 -300 -89
a -300 -89 a
SDict begin 12 H.A end
 -300 -89 a -300 -89 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.1) cvn H.B /DEST pdfmark end
 -300 -89 a 0 TeXcolorgray
-199 26 a Fc(1.)p 0 TeXcolorgray 42 w(This)f(pro)n(vides)f(a)h(help)h
(message.)-300 167 y
SDict begin H.S end
 -300 167 a -300 167 a
SDict begin 12 H.A end
 -300 167 a
-300 167 a
SDict begin [ /View [/XYZ H.V] /Dest (section.1) cvn H.B /DEST pdfmark end
 -300 167 a 253 x Fa(1)135 b(Problem)45 b(1:)-300
722 y Fc(One)22 b(w)n(a)n(y)g(of)h(transferring)e(\014les)h(from)h(a)f
(remote)g(computer)h(to)f(y)n(ours)f(and)i(vice)f(v)n(ersa)g(is)g(to)h
(use)f(secure)g(shell,)i(allo)n(wing)d(a)i(user)f(to)g(establish)-300
822 y(a)31 b(secure)f(connection)h(with)h(a)f(remote)f(computer)h(in)h
(order)e(to)h(send)g(and)g(reciev)n(e)f(information.)48
b(WinSCP)31 b(is)g(a)g(\014le)g(transfer)g(to)r(ol)g(that)-300
921 y(uses)c(a)g(secure)g(shell)h(to)f(allo)n(w)g(its)g(users)g(to)h
(mo)n(v)n(e)e(\014les)i(o)n(v)n(er)d(a)j(secure)e(connection.)-300
1141 y(FTP)i(or)e(\014le)i(transfer)f(proto)r(col)g(can)g(also)g(b)r(e)
h(used)g(to)g(transfer)f(\014les.)37 b(This)28 b(is)g(more)f(risky)g(b)
r(ecause)g(originally)f(it)i(did)h(not)e(go)g(through)g(a)-300
1241 y(secure)d(metho)r(d)i(suc)n(h)e(as)h(the)g(SSH.)h(When)f(an)g
(FTP)g(connection)f(b)r(et)n(w)n(een)h(t)n(w)n(o)f(mac)n(hines)h(is)g
(made)f(mac)n(hine)h(B)g(can)f(prompt)h(the)h(remote)-300
1340 y(user)h(for)g(a)g(username)g(and)g(passw)n(ord.)35
b(After)28 b(this)g(authen)n(tication)f(is)h(complete,)f(a)h(c)n
(hannel)f(is)g(op)r(ened)h(for)f(the)h(transfer)f(of)g(\014les.)-300
1560 y(Source:)40 b(\\Indiana)29 b(Univ)n(ersit)n(yPublic)f(Safet)n(y)i
(and)f(Institutional)h(Assurance.")42 b(Secure)29 b(File)h(T)-7
b(ransfer)29 b(Alternativ)n(es.)42 b(N.p.,)31 b(n.d.)44
b(W)-7 b(eb.)-300 1659 y(25)27 b(June)g(2015.)-300 1785
y
SDict begin H.S end
 -300 1785 a -300 1785 a
SDict begin 12 H.A end
 -300 1785 a -300 1785 a
SDict begin [ /View [/XYZ H.V] /Dest (section.2) cvn H.B /DEST pdfmark end
 -300
1785 a 269 x Fa(2)135 b(Problem)45 b(2)-300 2356 y Fc(Revision)30
b(Con)n(trol)f(Systems)h(are)f(soft)n(w)n(are)f(implemen)n(tations)j
(that)f(automate)g(the)g(storing,)g(retriev)-5 b(al,)30
b(iden)n(ti\014cation,)h(and)f(merging)f(of)-300 2455
y(revisions.)34 b(It)23 b(is)f(used)h(primarily)e(for)h(text)h(\014les)
f(that)h(are)f(c)n(hanged)f(and)i(manipulated)f(often)h(to)g(sa)n(v)n
(e)e(alot)h(of)g(time)h(and)g(reduce)f(complexit)n(y)-300
2555 y(for)27 b(the)h(user.)-300 2775 y(Source:)36 b(\\F)-7
b(ree)27 b(Soft)n(w)n(are)f(F)-7 b(oundation!")36 b(Rcs.)h(N.p.,)28
b(n.d.)37 b(W)-7 b(eb.)38 b(25)26 b(June)i(2015.)-300
2916 y
SDict begin H.S end
 -300 2916 a -300 2916 a
SDict begin 12 H.A end
 -300 2916 a -300 2916
a
SDict begin [ /View [/XYZ H.V] /Dest (section.3) cvn H.B /DEST pdfmark end
 -300 2916 a 253 x Fa(3)135 b(Problem)45 b(3)-300 3471
y Fc(Redirecting:)36 b(Used)28 b(to)f(pass)g(output)h(to)g(a)f(\014le.)
37 b(A)28 b(redirect)f(is)g(an)g(argumen)n(t)g(to)g(a)g(program.)35
b(What)28 b(happ)r(ens)g(is)f(that)h(a)f(program)e(is)j(ran)-300
3571 y(and)f(the)h(output)h(sa)n(v)n(ed)d(to)h(a)g(\014le.)37
b(Then)28 b(a)f(second)g(program)f(is)h(ran)g(using)g(this)h(temp)r
(orary)f(\014le)g(as)g(the)h(input.)-300 3790 y(Piping:)35
b(Used)25 b(to)g(pass)f(output)h(to)g(a)g(program)e(or)h(utilit)n(y)-7
b(.)36 b(s)25 b(pip)r(e)g(sep)r(erates)f(t)n(w)n(o)h(commands.)35
b(An)25 b(example)g(w)n(ould)f(b)r(e)i(a)e(program)f(b)r(eing)-300
3890 y(ran)k(and)g(all)h(the)g(output)g(will)f(b)r(e)h(placed)g(in)g
(the)g(desired)f(program,)e(o)n(v)n(erwriting)h(con)n(ten)n(ts)h(if)h
(they)f(already)g(exist.)-300 4031 y
SDict begin H.S end
 -300 4031 a -300
4031 a
SDict begin 12 H.A end
 -300 4031 a -300 4031 a
SDict begin [ /View [/XYZ H.V] /Dest (section.4) cvn H.B /DEST pdfmark end
 -300 4031 a 254 x Fa(4)135
b(problem)45 b(4)-300 4586 y Fc(Mak)n(e)23 b(is)h(the)g(command)f(that)
h(triggers)e(the)j(compilation)e(of)h(y)n(our)e(co)r(de.)36
b(Mak)n(e\014les)22 b(are)h(useful)i(b)r(ecause)e(they)h(allo)n(w)f(y)n
(ou)g(to)h(sp)r(ecify)g(some)-300 4686 y(in)n(tricacies)j(of)h(ho)n(w)f
(y)n(our)g(co)r(de)h(will)g(compile.)39 b(Mak)n(e\014les)27
b(are)g(also)g(e\016cienct)h(b)r(ecause)g(y)n(ou)f(can)h(set)g(them)h
(to)f(only)f(recompile)h(\014les)g(with)-300 4786 y(errors)d(when)j
(debugging.)36 b(They)28 b(also)e(mak)n(e)h(the)h(pro)r(cess)e(of)i
(compiling)f(y)n(our)f(\014les)i(m)n(uc)n(h)f(shorter)g(using)g(k)n
(eyw)n(ords.)-300 4927 y
SDict begin H.S end
 -300 4927 a -300 4927 a
SDict begin 12 H.A end
 -300
4927 a -300 4927 a
SDict begin [ /View [/XYZ H.V] /Dest (section.5) cvn H.B /DEST pdfmark end
 -300 4927 a 253 x Fa(5)135 b(problem)45
b(5)-300 5482 y Fc(Syn)n(tax)27 b(of)h(a)f(mak)n(e\014le:)p
0 TeXcolorgray 1929 5889 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.2) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray 0 TeXcolorgray -300 -360 a
SDict begin H.S end
 -300
-360 a -300 -360 a
SDict begin 12 H.A end
 -300 -360 a -300 -360 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.2) cvn H.B /DEST pdfmark end
 -300 -360
a 0 TeXcolorgray -199 -277 a Fc(1.)p 0 TeXcolorgray 42
w(:)35 b(The)26 b(basic)f(mak)n(e\014le)f(has)h(t)n(w)n(o)g(primary)f
(parts.)35 b(The)26 b(target)e(with)i(it's)g(dep)r(endencies)f(and)h
(the)f(system)h(command.)35 b(The)26 b(mak)n(e\014le)-92
-177 y(will)d(sometimes)f(use)h(dep)r(endencies)g(b)r(ecause)f(if)h(w)n
(e)g(only)f(mo)r(dify)i(one)e(\014le)h(it)g(is)g(more)f(e\016cienct)h
(to)g(just)g(recompile)f(that)h(\014le)g(instead)-92
-78 y(of)k(ev)n(erything)g(incuded)h(in)f(the)h(mak)n(e\014le.)-300
-28 y
SDict begin H.S end
 -300 -28 a -300 -28 a
SDict begin 12 H.A end
 -300 -28 a -300 -28 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.3) cvn H.B /DEST pdfmark end
 -300
-28 a 0 TeXcolorgray -199 88 a Fc(2.)p 0 TeXcolorgray
42 w(:)33 b(Mak)n(e\014les)18 b(also)h(use)h(v)-5 b(ariables.)33
b(Y)-7 b(ou)20 b(can)f(set)h(these)g(equal)f(to)g(v)-5
b(alues)20 b(at)g(the)g(b)r(eginning)f(of)h(y)n(our)f(\014le)h(and)f
(they)h(serv)n(e)f(the)h(purp)r(ose)f(of)-92 188 y(clarifying)j(the)i
(ob)5 b(jectiv)n(es)22 b(of)h(the)h(commands)e(w)n(e)h(write.)36
b(W)-7 b(e)23 b(can)g(use)g(the)h(m)n(with)g(the)f(deferencing)g(op)r
(erator)f(*dollarsign*\(V)-9 b(AR\).)-300 242 y
SDict begin H.S end
 -300
242 a -300 242 a
SDict begin 12 H.A end
 -300 242 a -300 242 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.4) cvn H.B /DEST pdfmark end
 -300 242 a 0 TeXcolorgray
-199 354 a Fc(3.)p 0 TeXcolorgray 42 w(:)35 b(Finally)-7
b(,)26 b(it)f(is)g(go)r(o)r(d)f(practice)g(to)h(include)g(a)g(clean)f
(command)h(at)g(the)g(end)g(of)g(y)n(our)f(mak)n(e\014le)g(to)h(get)f
(rid)h(of)g(all)f(curren)n(t)g(ob)5 b(ject)25 b(\014les)-92
454 y(and)i(executables.)-300 756 y(source:)49 b(\\Mak)n(e\014les.")54
b(Mrb)r(o)r(oks)33 b(Stu\013.)57 b(N.p.,)37 b(29)c(No)n(v.)56
b(2008.)e(W)-7 b(eb.)57 b(27)33 b(June)h(2015.)55 b(source:)48
b(A)35 b(Simple)f(Mak)n(e\014le)g(T)-7 b(utorial.")55
b(A)-300 856 y(Simple)28 b(Mak)n(e\014le)f(T)-7 b(utorial.)36
b(N.p.,)28 b(n.d.)38 b(W)-7 b(eb.)37 b(25)27 b(June)g(2015.)-300
997 y
SDict begin H.S end
 -300 997 a -300 997 a
SDict begin 12 H.A end
 -300 997 a -300 997 a
SDict begin [ /View [/XYZ H.V] /Dest (section.6) cvn H.B /DEST pdfmark end
 -300
997 a 253 x Fa(6)135 b(6)-300 1552 y Fc(The)29 b(command)g('\014nd)g(.)
41 b(-t)n(yp)r(e)29 b(f)h(-prin)n(t0)e(|)h(xargs)e(-0)h(\014le')i(will)
f(reade)f(items)h(from)g(\014le)g(instead)g(of)g(standard)f(input.)42
b(Stdin)29 b(will)h(remain)-300 1652 y(unc)n(hanged.)36
b(It)28 b(will)g(lo)r(cate)f(the)h(\014les)f(in)h(the)g(curren)n(t)f
(directory)f(and)i(corresp)r(onding)d(subtrees.)p 0 TeXcolorgray
1929 5889 a(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
