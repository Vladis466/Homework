        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 6040695 returned 100% blocks executed 100%
  6040695:    8:int compare(const void* a, const void* b) {
  6040695:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
  2395910:   10:    return 1;
  3644785:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
   977677:   12:    return -1;
  2667108:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 11 returned 100% blocks executed 95%
       11:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       11:   44:  SelectStream(1);
call    0 returned 100%
       11:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       11:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       11:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      121:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1210:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       11:   73:  if (numPlayers == 2)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        7:   77:  else if (numPlayers == 3)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:   78:    {
        6:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       11:   87:  if (numPlayers == 2)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        7:   95:      state->supplyCount[estate] = 12;
        7:   96:      state->supplyCount[duchy] = 12;
        7:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       11:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  102:  state->supplyCount[silver] = 40;
       11:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      231:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1815:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1705:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      124:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        -:  114:		{
       14:  115:		  if (numPlayers == 2){ 
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       12:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       96:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      110:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1595:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       41:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  139:    {
       30:  140:      state->deckCount[i] = 0;
      120:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       90:  143:	  state->deck[i][j] = estate;
       90:  144:	  state->deckCount[i]++;
        -:  145:	}
      240:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      210:  148:	  state->deck[i][j] = copper;
      210:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       41:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  155:    {
       30:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       41:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       30:  166:      state->handCount[i] = 0;
       30:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      308:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      297:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       11:  182:  state->outpostPlayed = 0;
       11:  183:  state->phase = 0;
       11:  184:  state->numActions = 1;
       11:  185:  state->numBuys = 1;
       11:  186:  state->playedCardCount = 0;
       11:  187:  state->whoseTurn = 0;
       11:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       66:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       55:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       11:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       11:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 167177 returned 100% blocks executed 93%
   167177:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   167177:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   167177:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
   167177:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  2484431:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
  2150077:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  2150077:  216:    newDeck[newDeckPos] = state->deck[player][card];
  2150077:  217:    newDeckPos++;
 15584987:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
 13434910:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  2150077:  221:    state->deckCount[player]--;
        -:  222:  }
  2317254:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
  2150077:  224:    state->deck[player][i] = newDeck[i];
  2150077:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   167177:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 171942 returned 100% blocks executed 91%
   171942:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
   171942:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
   171942:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
   171942:  243:  if ( state->numActions < 1 )
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  244:    {
       44:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
   171898:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:  //play card
   171898:  252:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
        -:  253:    {
   171885:  254:      return -1;
        -:  255:    }	  
        -:  256:  //check if selected card is an action
        -:  257:  //if ( card < adventurer || card > treasure_map )
        -:  258:    //{
        -:  259:      //return -1;
        -:  260:    //}
        -:  261:	
        -:  262:
        -:  263:	
        -:  264:  //reduce number of actions
       13:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
       13:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  269:	
       13:  270:  return 0;
        -:  271:}
        -:  272:
function buyCard called 513690 returned 100% blocks executed 100%
   513690:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
   513690:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
   513690:  281:  who = state->whoseTurn;
        -:  282:
   513690:  283:  if (state->numBuys < 1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      737:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
      737:  286:    return -1;
   512953:  287:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 14% (fallthrough)
branch  2 taken 86%
    73097:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    73097:  290:    return -1;
   439856:  291:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 99% (fallthrough)
branch  2 taken 1%
   439411:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
   439411:  294:    return -1;
        -:  295:  } else {
      445:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
      445:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  299:  
      445:  300:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
      445:  301:    state->numBuys--;
      445:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
      445:  309:  return 0;
        -:  310:}
        -:  311:
function numHandCards called 3351630 returned 100% blocks executed 100%
  3351630:  312:int numHandCards(struct gameState *state) {
  3351630:  313:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  314:}
        -:  315:
function handCard called 12080163 returned 100% blocks executed 100%
 12080163:  316:int handCard(int handPos, struct gameState *state) {
 12080163:  317:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
 12080163:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
function supplyCount called 513398 returned 100% blocks executed 100%
   513398:  321:int supplyCount(int card, struct gameState *state) {
   513398:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
function fullDeckCount called 8 returned 100% blocks executed 69%
        8:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
        8:  327:  int count = 0;
        -:  328:
      144:  329:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  330:    {
      136:  331:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  332:    }
        -:  333:
        8:  334:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  337:    }
        -:  338:
      216:  339:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  340:    {
      208:  341:      if (state->discard[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  342:    }
        -:  343:
        8:  344:  return count;
        -:  345:}
        -:  346:
function whoseTurn called 16464198 returned 100% blocks executed 100%
 16464198:  347:int whoseTurn(struct gameState *state) {
 16464198:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
function endTurn called 429925 returned 100% blocks executed 100%
   429925:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
   429925:  354:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  355:  
        -:  356:  //Discard hand
  2579552:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
  2149627:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  2149627:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
   429925:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
   429925:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
   258706:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
   171219:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
   429925:  371:  state->outpostPlayed = 0;
   429925:  372:  state->phase = 0;
   429925:  373:  state->numActions = 1;
   429925:  374:  state->coins = 0;
   429925:  375:  state->numBuys = 1;
   429925:  376:  state->playedCardCount = 0;
   429925:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
  2579550:  381:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
  2149625:  382:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  383:  }
        -:  384:
        -:  385:  //Update money
   429925:  386:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  387:
   429925:  388:  return 0;
        -:  389:}
        -:  390:
function isGameOver called 429936 returned 100% blocks executed 91%
   429936:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
   429936:  396:  if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
   429936:  402:  j = 0;
 11178336:  403:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  404:    {
 10748400:  405:      if (state->supplyCount[i] == 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  406:	{
   760222:  407:	  j++;
        -:  408:	}
        -:  409:    }
   429936:  410:  if ( j >= 3)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  411:    {
       11:  412:      return 1;
        -:  413:    }
        -:  414:
   429925:  415:  return 0;
        -:  416:}
        -:  417:
function scoreFor called 60 returned 100% blocks executed 76%
       60:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
       60:  421:  int score = 0;
        -:  422:  //score from hand
      170:  423:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 65%
branch  1 taken 35% (fallthrough)
        -:  424:    {
      110:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      110:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
      110:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      110:  428:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      110:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      110:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
      652:  434:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  435:    {
      592:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      592:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
      592:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      592:  439:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      592:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
      592:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
      652:  445:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  446:    {
      592:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      592:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
      592:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      592:  450:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      592:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
      592:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
        -:  453:    }
        -:  454:
       60:  455:  return score;
        -:  456:}
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
function drawCard called 2149729 returned 100% blocks executed 93%
  2149729:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
  2149729:  529:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
  2316918:  534:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
  2149772:  535:      state->deck[player][i] = state->discard[player][i];
  2149772:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
   167146:  539:    state->deckCount[player] = state->discardCount[player];
   167146:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
   167146:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  544:   
   167146:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
   167146:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
   167146:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
   167146:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
   167146:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
   167146:  560:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  561:      return -1;
        -:  562:
   167146:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
   167146:  564:    state->deckCount[player]--;
   167146:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
  1982583:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
  1982583:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
  1982583:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1982583:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1982583:  577:    state->deckCount[player]--;
  1982583:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
  2149729:  581:  return 0;
        -:  582:}
        -:  583:
function getCost called 440301 returned 100% blocks executed 77%
   440301:  584:int getCost(int cardNumber)
        -:  585:{
   440301:  586:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 39%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 2%
branch  8 taken 1%
branch  9 taken 1%
branch 10 taken 2%
branch 11 taken 7%
branch 12 taken 1%
branch 13 taken 6%
branch 14 taken 1%
branch 15 taken 6%
branch 16 taken 2%
branch 17 taken 6%
branch 18 taken 2%
branch 19 taken 8%
branch 20 taken 2%
branch 21 taken 1%
branch 22 taken 1%
branch 23 taken 1%
branch 24 taken 6%
branch 25 taken 3%
branch 26 taken 7%
branch 27 taken 0%
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
   170785:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
     8362:  603:      return 6;
        -:  604:    case council_room:
     1360:  605:      return 5;
        -:  606:    case feast:
      418:  607:      return 4;
        -:  608:    case gardens:
     9142:  609:      return 4;
        -:  610:    case mine:
    32911:  611:      return 5;
        -:  612:    case remodel:
     1050:  613:      return 4;
        -:  614:    case smithy:
    25762:  615:      return 4;
        -:  616:    case village:
     4632:  617:      return 3;
        -:  618:    case baron:
    24567:  619:      return 4;
        -:  620:    case great_hall:
     9518:  621:      return 3;
        -:  622:    case minion:
    26179:  623:      return 5;
        -:  624:    case steward:
     8984:  625:      return 3;
        -:  626:    case tribute:
    33897:  627:      return 5;
        -:  628:    case ambassador:
     9500:  629:      return 3;
        -:  630:    case cutpurse:
     1505:  631:      return 4;
        -:  632:    case embargo: 
      207:  633:      return 2;
        -:  634:    case outpost:
      624:  635:      return 5;
        -:  636:    case salvager:
    24426:  637:      return 4;
        -:  638:    case sea_hag:
    14170:  639:      return 4;
        -:  640:    case treasure_map:
    32302:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
function refCutpurse called 345062 returned 100% blocks executed 50%
   345062:  647:int refCutpurse(int card, int currentPlayer, struct gameState *state, int i, int j, int k, int handPos) 
        -:  648:{
   345062:  649:    if(card == cutpurse) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  650:	
        2:  651:      updateCoins(currentPlayer, state, 2);
call    0 returned 100%
        6:  652:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  653:	  {
        4:  654:	  if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  655:	    {
        2:  656:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  657:		{
    #####:  658:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  659:		    {
    #####:  660:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  661:		      break;
        -:  662:		    }
    #####:  663:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  664:		    {
    #####:  665:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  666:			{
    #####:  667:			  if (DEBUG)
        -:  668:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  669:			}	
    #####:  670:		      break;
        -:  671:		    }		
        -:  672:		}
        -:  673:					
        -:  674:	    }
        -:  675:				
        -:  676:	  }	
        -:  677:	
        -:  678:
        -:  679:
        -:  680:      //discard played card from hand
        2:  681:      discardCard(handPos, currentPlayer, state, 0);			
call    0 returned 100%
        -:  682:	}
   345062:  683:      return 0;
        -:  684:}
        -:  685:
function refSmithy called 172555 returned 100% blocks executed 100%
   172555:  686:int refSmithy(int card, int currentPlayer, struct gameState *state, int i, int j, int k, int handPos){
   172555:  687:    if(card == smithy) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  688:      //+3 Cards
       56:  689:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  690:	{
       42:  691:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  692:	}
        -:  693:			
        -:  694:      //discard card from hand
       14:  695:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  696:      
        -:  697:	}
   172555:  698:	return 0;
        -:  699:}
        -:  700:
function refVillage called 172555 returned 100% blocks executed 100%
   172555:  701:int refVillage(int card, int currentPlayer, struct gameState *state, int i, int j, int k, int handPos){
        -:  702:	
   172555:  703:    if(card == village) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  704:      //+1 Card
        3:  705:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  706:			
        -:  707:      //+2 Actions
        3:  708:      state->numActions = state->numActions + 2;
        -:  709:			
        -:  710:      //discard played card from hand
        3:  711:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  712:	}
   172555:  713:      return 0;
        -:  714:	  
        -:  715:}	  
        -:  716:
function refRemodel called 172555 returned 100% blocks executed 21%
   172555:  717:int refRemodel(int card, int currentPlayer, struct gameState *state, int i, int j, int k, int handPos, int choice1, int choice2){	  
        -:  718:   
   172555:  719:   if(card == remodel) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  728:
        -:  729:      //discard card from hand
        -:  730:     // discardCard(handPos, currentPlayer, state, 0);
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  738:	      break;
        -:  739:	    }
        -:  740:	}
        -:  741:
        -:  742:	}
   172555:  743:      return 0;	  
        -:  744:}
function refGreat_Hall called 172555 returned 100% blocks executed 100%
   172555:  745:int refGreat_Hall(int card, int currentPlayer, struct gameState *state, int handPos){
   172555:  746:    if(card == great_hall) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  747:      //+1 Card
        2:  748:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  749:			
        -:  750:      //+1 Actions
        2:  751:      state->numActions++;
        -:  752:			
        -:  753:      //discard card from hand
        2:  754:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  755:	}
   172555:  756:      return 0;
        -:  757:}
        -:  758:
function cardEffect called 172555 returned 100% blocks executed 25%
   172555:  759:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  760:{
   172555:  761:  int i = 0;
   172555:  762:  int j = 0;
   172555:  763:  int k = 0;
        -:  764:  int x;
        -:  765:  int index;
   172555:  766:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
   172555:  767:  int nextPlayer = currentPlayer + 1;
        -:  768:
   172555:  769:  int tributeRevealedCards[2] = {-1, -1};
        -:  770:  int temphand[MAX_HAND];// moved above the if statement
   172555:  771:  int drawntreasure=0;
        -:  772:  int cardDrawn;
   172555:  773:  int z = 0;// this is the counter for the temp hand
   172555:  774:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  775:    nextPlayer = 0;
        -:  776:  }
        -:  777:  
   172555:  778:	refCutpurse(card, currentPlayer, state,i ,j, k, handPos);
call    0 returned 100%
   172555:  779:	refSmithy(card, currentPlayer, state, i, j, k, handPos);
call    0 returned 100%
   172555:  780:	refVillage(card, currentPlayer, state, i, j, k, handPos);
call    0 returned 100%
   172555:  781:	refRemodel(card, currentPlayer, state, i, j, k, handPos, choice1, choice2);
call    0 returned 100%
   172555:  782:	refGreat_Hall(card, currentPlayer, state, handPos);
call    0 returned 100%
        -:  783:  //uses switch to select card and perform actions
   172555:  784:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 1%
branch  6 taken 0%
branch  7 taken 1%
branch  8 taken 1%
branch  9 taken 1%
branch 10 taken 1%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 99%
        -:  785:    {
        -:  786:    case adventurer:
    #####:  787:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  788:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  789:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  790:	}
    #####:  791:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  792:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  793:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  794:	  drawntreasure++;
        -:  795:	else{
    #####:  796:	  temphand[z]=cardDrawn;
    #####:  797:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  798:	  z++;
        -:  799:	}
        -:  800:      }
    #####:  801:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  802:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  803:	z=z-1;
        -:  804:      }
    #####:  805:      return 0;
        -:  806:			
        -:  807:    case council_room:
        -:  808:      //+4 Cards
    #####:  809:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  810:	{
    #####:  811:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  812:	}
        -:  813:			
        -:  814:      //+1 Buy
    #####:  815:      state->numBuys++;
        -:  816:			
        -:  817:      //Each other player draws a card
    #####:  818:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  819:	{
    #####:  820:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  821:	    {
    #####:  822:	      drawCard(i, state);
call    0 never executed
        -:  823:	    }
        -:  824:	}
        -:  825:			
        -:  826:      //put played card in played card pile
    #####:  827:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  828:			
    #####:  829:      return 0;
        -:  830:			
        -:  831:    case feast:
        -:  832:      //gain card with cost up to 5
        -:  833:      //Backup hand
    #####:  834:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  835:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  836:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  837:      }
        -:  838:      //Backup hand
        -:  839:
        -:  840:      //Update Coins for Buy
    #####:  841:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  842:      x = 1;//Condition to loop on
    #####:  843:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  844:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  845:	  if (DEBUG)
        -:  846:	    printf("None of that card left, sorry!\n");
        -:  847:
    #####:  848:	  if (DEBUG){
        -:  849:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  850:	  }
        -:  851:	}
    #####:  852:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  853:	  printf("That card is too expensive!\n");
call    0 never executed
    #####:  854:	  printf("Pick another choice please with a cost less than %d", state->coins);
call    0 never executed
    #####:  855:	  scanf("%d", &choice1);
call    0 never executed
        -:  856:
    #####:  857:	  if (DEBUG){
        -:  858:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  859:	  }
        -:  860:	}
        -:  861:	else{
        -:  862:
    #####:  863:	  if (DEBUG){
        -:  864:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  865:	  }
        -:  866:
    #####:  867:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  868:	  x = 0;//No more buying cards
        -:  869:
    #####:  870:	  if (DEBUG){
        -:  871:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  872:	  }
        -:  873:
        -:  874:	}
        -:  875:      }     
        -:  876:
        -:  877:      //Reset Hand
    #####:  878:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  879:	state->hand[currentPlayer][i] = temphand[i];
    #####:  880:	temphand[i] = -1;
        -:  881:      }
        -:  882:      //Reset Hand
        -:  883:      			
    #####:  884:      return 0;
        -:  885:			
        -:  886:    case gardens:
    #####:  887:      return -1;
        -:  888:			
        -:  889:    case mine:
    #####:  890:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  891:
    #####:  892:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  893:	{
    #####:  894:	  return -1;
        -:  895:	}
        -:  896:		
    #####:  897:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  898:	{
    #####:  899:	  return -1;
        -:  900:	}
        -:  901:
    #####:  902:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  903:	{
    #####:  904:	  return -1;
        -:  905:	}
        -:  906:
    #####:  907:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  908:
        -:  909:      //discard card from hand
    #####:  910:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  911:
        -:  912:      //discard trashed card
    #####:  913:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  914:	{
    #####:  915:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  916:	    {
    #####:  917:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  918:	      break;
        -:  919:	    }
        -:  920:	}
        -:  921:			
    #####:  922:      return 0;
        -:  923:			
        -:  924:
        -:  925:			
        -:  926:			
        -:  927:			
        -:  928:			
        -:  929:		
        -:  930:    case baron:
        1:  931:      state->numBuys++;//Increase buys by 1!
        1:  932:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  933:	int p = 0;//Iterator for hand!
        1:  934:	int card_not_discarded = 1;//Flag for discard set!
        6:  935:	while(card_not_discarded){
branch  0 taken 80%
branch  1 taken 20%
        4:  936:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  937:	    state->coins += 4;//Add 4 coins to the amount of coins
        1:  938:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1:  939:	    state->discardCount[currentPlayer]++;
        3:  940:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  941:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  942:	    }
        1:  943:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:  944:	    state->handCount[currentPlayer]--;
        1:  945:	    card_not_discarded = 0;//Exit the loop
        -:  946:	  }
        3:  947:	  else if (p > state->handCount[currentPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  948:	    if(DEBUG) {
        -:  949:	      printf("No estate cards in your hand, invalid choice\n");
        -:  950:	      printf("Must gain an estate if there are any\n");
        -:  951:	    }
    #####:  952:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  953:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  954:	      state->supplyCount[estate]--;//Decrement estates
    #####:  955:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  956:		isGameOver(state);
call    0 never executed
        -:  957:	      }
        -:  958:	    }
    #####:  959:	    card_not_discarded = 0;//Exit the loop
        -:  960:	  }
        -:  961:			    
        -:  962:	  else{
        3:  963:	    p++;//Next card
        -:  964:	  }
        -:  965:	}
        -:  966:      }
        -:  967:			    
        -:  968:      else{
    #####:  969:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  970:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  971:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  972:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  973:	    isGameOver(state);
call    0 never executed
        -:  974:	  }
        -:  975:	}
        -:  976:      }
        -:  977:	    
        -:  978:      
        1:  979:      return 0;
        -:  980:		
        -:  981:/*     case great_hall:
        -:  982:      //+1 Card
        -:  983:      drawCard(currentPlayer, state);
        -:  984:			
        -:  985:      //+1 Actions
        -:  986:      state->numActions++;
        -:  987:			
        -:  988:      //discard card from hand
        -:  989:      discardCard(handPos, currentPlayer, state, 0);
        -:  990:      return 0; */
        -:  991:		
        -:  992:    case minion:
        -:  993:      //+1 action
    #####:  994:      state->numActions++;
        -:  995:			
        -:  996:      //discard card from hand
    #####:  997:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  998:			
    #####:  999:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1000:	{
    #####: 1001:	  state->coins = state->coins + 2;
        -: 1002:	}
        -: 1003:			
    #####: 1004:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1005:	{
        -: 1006:	  //discard hand
    #####: 1007:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1008:	    {
    #####: 1009:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1010:	    }
        -: 1011:				
        -: 1012:	  //draw 4
    #####: 1013:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1014:	    {
    #####: 1015:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1016:	    }
        -: 1017:				
        -: 1018:	  //other players discard hand and redraw if hand size > 4
    #####: 1019:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1020:	    {
    #####: 1021:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1022:		{
    #####: 1023:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1024:		    {
        -: 1025:		      //discard hand
    #####: 1026:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1027:			{
    #####: 1028:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1029:			}
        -: 1030:							
        -: 1031:		      //draw 4
    #####: 1032:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1033:			{
    #####: 1034:			  drawCard(i, state);
call    0 never executed
        -: 1035:			}
        -: 1036:		    }
        -: 1037:		}
        -: 1038:	    }
        -: 1039:				
        -: 1040:	}
    #####: 1041:      return 0;
        -: 1042:		
        -: 1043:    case steward:
        7: 1044:      if (choice1 == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1045:	{
        -: 1046:	  //+2 cards
    #####: 1047:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1048:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1049:	}
        7: 1050:      else if (choice1 == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1051:	{
        -: 1052:	  //+2 coins
    #####: 1053:	  state->coins = state->coins + 2;
        -: 1054:	}
        -: 1055:      else
        -: 1056:	{
        -: 1057:	  //trash 2 cards in hand
        7: 1058:	  discardCard(choice2, currentPlayer, state, 1);
call    0 returned 100%
        7: 1059:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1060:	}
        -: 1061:			
        -: 1062:      //discard card from hand
        7: 1063:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        7: 1064:      return 0;
        -: 1065:		
        -: 1066:    case tribute:
        1: 1067:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1068:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1070:	  state->deckCount[nextPlayer]--;
        -: 1071:	}
    #####: 1072:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1073:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1074:	  state->discardCount[nextPlayer]--;
        -: 1075:	}
        -: 1076:	else{
        -: 1077:	  //No Card to Reveal
    #####: 1078:	  if (DEBUG){
        -: 1079:	    printf("No cards to reveal\n");
        -: 1080:	  }
        -: 1081:	}
        -: 1082:      }
        -: 1083:	    
        -: 1084:      else{
        1: 1085:	if (state->deckCount[nextPlayer] == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6: 1086:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5: 1087:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        5: 1088:	    state->deckCount[nextPlayer]++;
        5: 1089:	    state->discard[nextPlayer][i] = -1;
        5: 1090:	    state->discardCount[nextPlayer]--;
        -: 1091:	  }
        -: 1092:			    
        1: 1093:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 returned 100%
        -: 1094:	} 
        1: 1095:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1: 1096:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        1: 1097:	state->deckCount[nextPlayer]--;
        1: 1098:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1: 1099:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        1: 1100:	state->deckCount[nextPlayer]--;
        -: 1101:      }    
        -: 1102:		       
        1: 1103:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1104:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1105:	state->playedCardCount++;
    #####: 1106:	tributeRevealedCards[1] = -1;
        -: 1107:      }
        -: 1108:
        4: 1109:      for (i = 0; i <= 2; i ++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        4: 1110:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        1: 1111:	  state->coins += 2;
        -: 1112:	}
        -: 1113:		    
        3: 1114:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        1: 1115:	  drawCard(currentPlayer, state);
call    0 returned 100%
        1: 1116:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1117:	}
        -: 1118:	else{//Action Card
        1: 1119:	  state->numActions = state->numActions + 2;
        -: 1120:	}
        -: 1121:      }
        -: 1122:	    
        1: 1123:      return 0;
        -: 1124:		
        -: 1125:    case ambassador:
       25: 1126:      j = 0;		//used to check if player has enough cards to discard
        -: 1127:
       25: 1128:      if (choice2 > 2 || choice2 < 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -: 1129:	{
       25: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
    #####: 1133:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  return -1;
        -: 1136:	}
        -: 1137:
    #####: 1138:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	{
    #####: 1140:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1141:	    {
    #####: 1142:	      j++;
        -: 1143:	    }
        -: 1144:	}
    #####: 1145:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1146:	{
    #####: 1147:	  return -1;				
        -: 1148:	}
        -: 1149:
    #####: 1150:      if (DEBUG) 
        -: 1151:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1152:
        -: 1153:      //increase supply count for choosen card by amount being discarded
    #####: 1154:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1155:			
        -: 1156:      //each other player gains a copy of revealed card
    #####: 1157:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1158:	{
    #####: 1159:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1160:	    {
    #####: 1161:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1162:	    }
        -: 1163:	}
        -: 1164:
        -: 1165:      //discard played card from hand
    #####: 1166:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1167:
        -: 1168:      //trash copies of cards returned to supply
    #####: 1169:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1170:	{
    #####: 1171:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1172:	    {
    #####: 1173:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1174:		{
    #####: 1175:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1176:		  break;
        -: 1177:		}
        -: 1178:	    }
        -: 1179:	}			
        -: 1180:
    #####: 1181:      return 0;
        -: 1182:	
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
       14: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
       14: 1189:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1190:	{
       10: 1191:	  return -1;
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
        4: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
        4: 1198:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 100%
        4: 1199:      return 0;
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:      //set outpost flag
    #####: 1203:      state->outpostPlayed++;
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case salvager:
        -: 1210:      //+1 buy
    #####: 1211:      state->numBuys++;
        -: 1212:			
    #####: 1213:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1214:	{
        -: 1215:	  //gain coins equal to trashed card
    #####: 1216:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1217:	  //trash card
    #####: 1218:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1219:	}
        -: 1220:			
        -: 1221:      //discard card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case sea_hag:
    #####: 1226:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1227:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1228:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1229:	  state->discardCount[i]++;
    #####: 1230:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1231:	}
        -: 1232:      }
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case treasure_map:
        -: 1236:      //search hand for another treasure_map
    #####: 1237:      index = -1;
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1239:	{
    #####: 1240:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1241:	    {
    #####: 1242:	      index = i;
    #####: 1243:	      break;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1247:	{
        -: 1248:	  //trash both treasure cards
    #####: 1249:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1250:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1251:
        -: 1252:	  //gain 4 Gold cards
    #####: 1253:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1254:	    {
    #####: 1255:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1256:	    }
        -: 1257:				
        -: 1258:	  //return success
    #####: 1259:	  return 1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
    #####: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
   172507: 1266:	refCutpurse(card, currentPlayer, state, i, j, k, handPos);
call    0 returned 100%
        -: 1267:	
   172507: 1268:  return -1;
        -: 1269:}
        -: 1270:
function discardCard called 46 returned 100% blocks executed 75%
       46: 1271:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1272:{
        -: 1273:	
        -: 1274:  //if card is not trashed, added to Played pile 
       46: 1275:  if (trashFlag < 1)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -: 1276:    {
        -: 1277:      //add card to played pile
       28: 1278:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       28: 1279:      state->playedCardCount++;
        -: 1280:    }
        -: 1281:	
        -: 1282:  //set played card to -1
       46: 1283:  state->hand[currentPlayer][handPos] = -1;
        -: 1284:	
        -: 1285:  //remove card from player's hand
       46: 1286:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
       46: 1291:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1292:    {
        -: 1293:      //reduce number of cards in hand
    #####: 1294:      state->handCount[currentPlayer]--;
        -: 1295:    }
        -: 1296:  else 	
        -: 1297:    {
        -: 1298:      //replace discarded card with last card in hand
       46: 1299:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1300:      //set last card to -1
       46: 1301:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1302:      //reduce number of cards in hand
       46: 1303:      state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:	
       46: 1306:  return 0;
        -: 1307:}
        -: 1308:
function gainCard called 445 returned 100% blocks executed 70%
      445: 1309:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1310:{
        -: 1311:  //Note: supplyPos is enum of choosen card
        -: 1312:	
        -: 1313:  //check if supply pile is empty (0) or card is not used in game (-1)
      445: 1314:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1315:    {
    #####: 1316:      return -1;
        -: 1317:    }
        -: 1318:	
        -: 1319:  //added card for [whoseTurn] current player:
        -: 1320:  // toFlag = 0 : add to discard
        -: 1321:  // toFlag = 1 : add to deck
        -: 1322:  // toFlag = 2 : add to hand
        -: 1323:
      445: 1324:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1325:    {
    #####: 1326:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1327:      state->deckCount[player]++;
        -: 1328:    }
      445: 1329:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1330:    {
    #####: 1331:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1332:      state->handCount[player]++;
        -: 1333:    }
        -: 1334:  else
        -: 1335:    {
      445: 1336:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      445: 1337:      state->discardCount[player]++;
        -: 1338:    }
        -: 1339:	
        -: 1340:  //decrease number in supply pile
      445: 1341:  state->supplyCount[supplyPos]--;
        -: 1342:	 
      445: 1343:  return 0;
        -: 1344:}
        -: 1345:
function updateCoins called 429951 returned 100% blocks executed 80%
   429951: 1346:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1347:{
        -: 1348:  int i;
        -: 1349:	
        -: 1350:  //reset coin count
   429951: 1351:  state->coins = 0;
        -: 1352:
        -: 1353:  //add coins for each Treasure card in player's hand
  2579681: 1354:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1355:    {
  2149730: 1356:      if (state->hand[player][i] == copper)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -: 1357:	{
   865869: 1358:	  state->coins += 1;
        -: 1359:	}
  1283861: 1360:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1361:	{
    #####: 1362:	  state->coins += 2;
        -: 1363:	}
  1283861: 1364:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1365:	{
    #####: 1366:	  state->coins += 3;
        -: 1367:	}	
        -: 1368:    }	
        -: 1369:
        -: 1370:  //add bonus
   429951: 1371:  state->coins += bonus;
        -: 1372:
   429951: 1373:  return 0;
        -: 1374:}
        -: 1375:
        -: 1376:
        -: 1377://end of dominion.c
        -: 1378:
