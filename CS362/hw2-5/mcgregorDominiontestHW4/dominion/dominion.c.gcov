        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   451575:    8:int compare(const void* a, const void* b) {
   451575:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
   451575:   11:  if (*(int*)a < *(int*)b)
   120420:   12:    return -1;
   331155:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    10000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    10000:   44:  SelectStream(1);
    10000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    10000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    10000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   110000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1100000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1000000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    10000:   73:  if (numPlayers == 2)
        -:   74:    {
     3280:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     6720:   77:  else if (numPlayers == 3)
        -:   78:    {
     3335:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     3385:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    10000:   87:  if (numPlayers == 2)
        -:   88:    {
     3280:   89:      state->supplyCount[estate] = 8;
     3280:   90:      state->supplyCount[duchy] = 8;
     3280:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     6720:   95:      state->supplyCount[estate] = 12;
     6720:   96:      state->supplyCount[duchy] = 12;
     6720:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    10000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    10000:  102:  state->supplyCount[silver] = 40;
    10000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   210000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1650000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  1550000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   100000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   100000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   100000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1450000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    40105:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    30105:  140:      state->deckCount[i] = 0;
   120420:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    90315:  143:	  state->deck[i][j] = estate;
    90315:  144:	  state->deckCount[i]++;
        -:  145:	}
   240840:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   210735:  148:	  state->deck[i][j] = copper;
   210735:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    40105:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    30105:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    40105:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    30105:  166:      state->handCount[i] = 0;
    30105:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   280000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   270000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    10000:  182:  state->outpostPlayed = 0;
    10000:  183:  state->phase = 0;
    10000:  184:  state->numActions = 1;
    10000:  185:  state->numBuys = 1;
    10000:  186:  state->playedCardCount = 0;
    10000:  187:  state->whoseTurn = 0;
    10000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    60000:  192:  for (it = 0; it < 5; it++){
    50000:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    10000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    10000:  198:  return 0;
        -:  199:}
        -:  200:
    30105:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    30105:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    30105:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    30105:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   361260:  214:  while (state->deckCount[player] > 0) {
   301050:  215:    card = floor(Random() * state->deckCount[player]);
   301050:  216:    newDeck[newDeckPos] = state->deck[player][card];
   301050:  217:    newDeckPos++;
   979901:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   678851:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   301050:  221:    state->deckCount[player]--;
        -:  222:  }
   331155:  223:  for (i = 0; i < newDeckPos; i++) {
   301050:  224:    state->deck[player][i] = newDeck[i];
   301050:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    30105:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    10000:  346:int whoseTurn(struct gameState *state) {
    10000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    77561:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    77561:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
    #####:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
    #####:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    77561:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
    77561:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    77561:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    77561:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    77561:  576:    state->deckCount[player]--;
    77561:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    77561:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
    #####:  647:int cardEffectGardens() {
    #####:  648:	return -1;
        -:  649:}
        -:  650:
        -:  651:
    #####:  652:int cardEffectSmithy(int handPos, int currentPlayer,
        -:  653:		struct gameState *state) {
        -:  654:	// draw three cards
    #####:  655:	drawCard(currentPlayer, state);
    #####:  656:	drawCard(currentPlayer, state);
    #####:  657:	drawCard(currentPlayer, state);
        -:  658:	
    #####:  659:	return 0;
        -:  660:}
        -:  661:
        -:  662:
    #####:  663:int cardEffectBaron(int currentPlayer, int choice1, struct gameState *state) {
    #####:  664:	int p = 0;
        -:  665:	
        -:  666:	// get one more buy
    #####:  667:	state->numBuys++;
        -:  668:	
        -:  669:	// exchange estate for four coins, or draw an estate
    #####:  670:	if (choice1 > 0) {
        -:  671:		while (1) {
    #####:  672:			if (state->hand[currentPlayer][p] == estate) {
    #####:  673:				state->coins += 4;
    #####:  674:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  675:				state->discardCount[currentPlayer]++;
    #####:  676:				for (; p < state->handCount[currentPlayer] - 1; p++)
    #####:  677:					state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  678:				state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  679:				state->handCount[currentPlayer]--;
    #####:  680:				break;
    #####:  681:			} else if (p > state->handCount[currentPlayer]) {
    #####:  682:				if (DEBUG) {
        -:  683:					printf("No estate cards in your hand, invalid choice\n");
        -:  684:					printf("Must gain an estate if there are any\n");
        -:  685:				}
    #####:  686:				if (supplyCount(estate, state) > 0) {
    #####:  687:					gainCard(estate, state, 0, currentPlayer);
    #####:  688:					state->supplyCount[estate]--;
    #####:  689:					if (!supplyCount(estate, state))
    #####:  690:						isGameOver(state);
        -:  691:				}
    #####:  692:				break;
        -:  693:			}
        -:  694:
    #####:  695:			p++;
    #####:  696:		}
        -:  697:	} else {
    #####:  698:		if (supplyCount(estate, state) > 0) {
    #####:  699:			gainCard(estate, state, 0, currentPlayer);
    #####:  700:			state->supplyCount[estate]--;
        -:  701:		}
        -:  702:	}
        -:  703:	
    #####:  704:	return 0;
        -:  705:}
        -:  706:
        -:  707:
    #####:  708:int cardEffectGreatHall(int handPos, int currentPlayer,
        -:  709:		struct gameState *state) {
        -:  710:	// draw card, get one more action
    #####:  711:	drawCard(currentPlayer, state);
    #####:  712:	state->numActions++;
    #####:  713:	discardCard(handPos, currentPlayer, state, 0);
        -:  714:	
    #####:  715:	return 0;
        -:  716:}
        -:  717:
        -:  718:
    #####:  719:int cardEffectMinion(int handPos, int currentPlayer,
        -:  720:		int choice1, int choice2, struct gameState *state) {
        -:  721:	int i;
        -:  722:	
        -:  723:	// one more action
    #####:  724:	state->numActions++;
    #####:  725:	discardCard(handPos, currentPlayer, state, 0);
        -:  726:	
    #####:  727:	if (choice1) { // player gets 2 coins
    #####:  728:		state->coins += 2;
    #####:  729:	} else if (choice2) { // player draw four cards, everyone else gets no more than four
    #####:  730:		while (numHandCards(state) > 0)
    #####:  731:			discardCard(handPos, currentPlayer, state, 0);
        -:  732:		
    #####:  733:		drawCard(currentPlayer, state);
    #####:  734:		drawCard(currentPlayer, state);
    #####:  735:		drawCard(currentPlayer, state);
    #####:  736:		drawCard(currentPlayer, state);
        -:  737:		
    #####:  738:		for (i = 0; i < state->numPlayers; i++) {
    #####:  739:			if (i != currentPlayer) {
    #####:  740:				if (state->handCount[i] > 4) { // other player has > 4 cards
        -:  741:					// discard hand
    #####:  742:					while (state->handCount[i] > 0)
    #####:  743:						discardCard(handPos, i, state, 0);
        -:  744:					
        -:  745:					// draw 4 new cards
    #####:  746:					drawCard(currentPlayer, state);
    #####:  747:					drawCard(currentPlayer, state);
    #####:  748:					drawCard(currentPlayer, state);
    #####:  749:					drawCard(currentPlayer, state);
        -:  750:				}
        -:  751:			}
        -:  752:		}
        -:  753:	}
        -:  754:	
    #####:  755:	return 0;
        -:  756:}
        -:  757:
        -:  758:
    10000:  759:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  760:{
        -:  761:  int i;
        -:  762:  int j;
        -:  763:  int k;
        -:  764:  int x;
        -:  765:  int index;
    10000:  766:  int currentPlayer = whoseTurn(state);
    10000:  767:  int nextPlayer = currentPlayer + 1;
        -:  768:
    10000:  769:  int tributeRevealedCards[2] = {-1, -1};
        -:  770:  int temphand[MAX_HAND];// moved above the if statement
    10000:  771:  int drawntreasure=0;
        -:  772:  int cardDrawn;
    10000:  773:  int z = 0;// this is the counter for the temp hand
    10000:  774:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  775:    nextPlayer = 0;
        -:  776:  }
        -:  777:  
        -:  778:	
        -:  779:  //uses switch to select card and perform actions
    10000:  780:  switch( card ) 
        -:  781:    {
        -:  782:    case adventurer:
    47561:  783:      while(drawntreasure<2){
    27561:  784:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  785:	  shuffle(currentPlayer, state);
        -:  786:	}
    27561:  787:	drawCard(currentPlayer, state);
    27561:  788:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    47561:  789:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    20000:  790:	  drawntreasure++;
        -:  791:	else{
     7561:  792:	  temphand[z]=cardDrawn;
     7561:  793:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     7561:  794:	  z++;
        -:  795:	}
        -:  796:      }
    27561:  797:      while(z-1>=0){
     7561:  798:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     7561:  799:	z=z-1;
        -:  800:      }
    10000:  801:      return 0;
        -:  802:			
        -:  803:    case council_room:
        -:  804:      //+4 Cards
    #####:  805:      for (i = 0; i < 4; i++)
        -:  806:	{
    #####:  807:	  drawCard(currentPlayer, state);
        -:  808:	}
        -:  809:			
        -:  810:      //+1 Buy
    #####:  811:      state->numBuys++;
        -:  812:			
        -:  813:      //Each other player draws a card
    #####:  814:      for (i = 0; i < state->numPlayers; i++)
        -:  815:	{
    #####:  816:	  if ( i != currentPlayer )
        -:  817:	    {
    #####:  818:	      drawCard(i, state);
        -:  819:	    }
        -:  820:	}
        -:  821:			
        -:  822:      //put played card in played card pile
    #####:  823:      discardCard(handPos, currentPlayer, state, 0);
        -:  824:			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case feast:
        -:  828:      //gain card with cost up to 5
        -:  829:      //Backup hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  832:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  833:      }
        -:  834:      //Backup hand
        -:  835:
        -:  836:      //Update Coins for Buy
    #####:  837:      updateCoins(currentPlayer, state, 5);
    #####:  838:      x = 1;//Condition to loop on
    #####:  839:      while( x == 1) {//Buy one card
    #####:  840:	if (supplyCount(choice1, state) <= 0){
    #####:  841:	  if (DEBUG)
        -:  842:	    printf("None of that card left, sorry!\n");
        -:  843:
    #####:  844:	  if (DEBUG){
        -:  845:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  846:	  }
        -:  847:	}
    #####:  848:	else if (state->coins < getCost(choice1)){
    #####:  849:	  printf("That card is too expensive!\n");
        -:  850:
    #####:  851:	  if (DEBUG){
        -:  852:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  853:	  }
        -:  854:	}
        -:  855:	else{
        -:  856:
    #####:  857:	  if (DEBUG){
        -:  858:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  859:	  }
        -:  860:
    #####:  861:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  862:	  x = 0;//No more buying cards
        -:  863:
    #####:  864:	  if (DEBUG){
        -:  865:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  866:	  }
        -:  867:
        -:  868:	}
        -:  869:      }     
        -:  870:
        -:  871:      //Reset Hand
    #####:  872:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  873:	state->hand[currentPlayer][i] = temphand[i];
    #####:  874:	temphand[i] = -1;
        -:  875:      }
        -:  876:      //Reset Hand
        -:  877:      			
    #####:  878:      return 0;
        -:  879:			
        -:  880:    case gardens:
        -:  881:      /*return -1;*/
    #####:  882:		return cardEffectGardens();
        -:  883:			
        -:  884:    case mine:
    #####:  885:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  886:
    #####:  887:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  888:	{
    #####:  889:	  return -1;
        -:  890:	}
        -:  891:		
    #####:  892:      if (choice2 > treasure_map || choice2 < curse)
        -:  893:	{
    #####:  894:	  return -1;
        -:  895:	}
        -:  896:
    #####:  897:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2) )
        -:  898:	{
    #####:  899:	  return -1;
        -:  900:	}
        -:  901:
    #####:  902:      gainCard(choice2, state, 2, currentPlayer);
        -:  903:
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
        -:  906:
        -:  907:      //discard trashed card
    #####:  908:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  909:	{
    #####:  910:	  if (state->hand[currentPlayer][i] == j)
        -:  911:	    {
    #####:  912:	      discardCard(i, currentPlayer, state, 0);			
    #####:  913:	      break;
        -:  914:	    }
        -:  915:	}
        -:  916:			
    #####:  917:      return 0;
        -:  918:			
        -:  919:    case remodel:
    #####:  920:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  921:
    #####:  922:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  923:	{
    #####:  924:	  return -1;
        -:  925:	}
        -:  926:
    #####:  927:      gainCard(choice2, state, 0, currentPlayer);
        -:  928:
        -:  929:      //discard card from hand
    #####:  930:      discardCard(handPos, currentPlayer, state, 0);
        -:  931:
        -:  932:      //discard trashed card
    #####:  933:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  934:	{
    #####:  935:	  if (state->hand[currentPlayer][i] == j)
        -:  936:	    {
    #####:  937:	      discardCard(i, currentPlayer, state, 0);			
    #####:  938:	      break;
        -:  939:	    }
        -:  940:	}
        -:  941:
        -:  942:
    #####:  943:      return 0;
        -:  944:		
        -:  945:    case smithy:
        -:  946:      /*//+3 Cards
        -:  947:      for (i = 0; i < 3; i++)
        -:  948:	{
        -:  949:	  drawCard(currentPlayer, state);
        -:  950:	}
        -:  951:			
        -:  952:      //discard card from hand
        -:  953:      discardCard(handPos, currentPlayer, state, 0);
        -:  954:      return 0;*/
    #####:  955:		return cardEffectSmithy(handPos, currentPlayer, state);
        -:  956:		
        -:  957:    case village:
        -:  958:      //+1 Card
    #####:  959:      drawCard(currentPlayer, state);
        -:  960:			
        -:  961:      //+2 Actions
    #####:  962:      state->numActions = state->numActions + 2;
        -:  963:			
        -:  964:      //discard played card from hand
    #####:  965:      discardCard(handPos, currentPlayer, state, 0);
    #####:  966:      return 0;
        -:  967:		
        -:  968:    case baron:
        -:  969:      /*state->numBuys++;//Increase buys by 1!
        -:  970:      if (choice1 > 0){//Boolean true or going to discard an estate
        -:  971:	int p = 0;//Iterator for hand!
        -:  972:	int card_not_discarded = 1;//Flag for discard set!
        -:  973:	while(card_not_discarded){
        -:  974:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -:  975:	    state->coins += 4;//Add 4 coins to the amount of coins
        -:  976:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -:  977:	    state->discardCount[currentPlayer]++;
        -:  978:	    for (;p < state->handCount[currentPlayer]; p++){
        -:  979:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  980:	    }
        -:  981:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  982:	    state->handCount[currentPlayer]--;
        -:  983:	    card_not_discarded = 0;//Exit the loop
        -:  984:	  }
        -:  985:	  else if (p > state->handCount[currentPlayer]){
        -:  986:	    if(DEBUG) {
        -:  987:	      printf("No estate cards in your hand, invalid choice\n");
        -:  988:	      printf("Must gain an estate if there are any\n");
        -:  989:	    }
        -:  990:	    if (supplyCount(estate, state) > 0){
        -:  991:	      gainCard(estate, state, 0, currentPlayer);
        -:  992:	      state->supplyCount[estate]--;//Decrement estates
        -:  993:	      if (supplyCount(estate, state) == 0){
        -:  994:		isGameOver(state);
        -:  995:	      }
        -:  996:	    }
        -:  997:	    card_not_discarded = 0;//Exit the loop
        -:  998:	  }
        -:  999:			    
        -: 1000:	  else{
        -: 1001:	    p++;//Next card
        -: 1002:	  }
        -: 1003:	}
        -: 1004:      }
        -: 1005:			    
        -: 1006:      else{
        -: 1007:	if (supplyCount(estate, state) > 0){
        -: 1008:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1009:	  state->supplyCount[estate]--;//Decrement Estates
        -: 1010:	  if (supplyCount(estate, state) == 0){
        -: 1011:	    isGameOver(state);
        -: 1012:	  }
        -: 1013:	}
        -: 1014:      }
        -: 1015:	    
        -: 1016:      
        -: 1017:      return 0;*/
    #####: 1018:		return cardEffectBaron(currentPlayer, choice1, state);
        -: 1019:		
        -: 1020:    case great_hall:
        -: 1021:      /*//+1 Card
        -: 1022:      drawCard(currentPlayer, state);
        -: 1023:			
        -: 1024:      //+1 Actions
        -: 1025:      state->numActions++;
        -: 1026:			
        -: 1027:      //discard card from hand
        -: 1028:      discardCard(handPos, currentPlayer, state, 0);
        -: 1029:      return 0;*/
    #####: 1030:		return cardEffectGreatHall(handPos, currentPlayer, state);
        -: 1031:		
        -: 1032:    case minion:
        -: 1033:      /*//+1 action
        -: 1034:      state->numActions++;
        -: 1035:			
        -: 1036:      //discard card from hand
        -: 1037:      discardCard(handPos, currentPlayer, state, 0);
        -: 1038:			
        -: 1039:      if (choice1)		//+2 coins
        -: 1040:	{
        -: 1041:	  state->coins = state->coins + 2;
        -: 1042:	}
        -: 1043:			
        -: 1044:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1045:	{
        -: 1046:	  //discard hand
        -: 1047:	  while(numHandCards(state) > 0)
        -: 1048:	    {
        -: 1049:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1050:	    }
        -: 1051:				
        -: 1052:	  //draw 4
        -: 1053:	  for (i = 0; i < 4; i++)
        -: 1054:	    {
        -: 1055:	      drawCard(currentPlayer, state);
        -: 1056:	    }
        -: 1057:				
        -: 1058:	  //other players discard hand and redraw if hand size > 4
        -: 1059:	  for (i = 0; i < state->numPlayers; i++)
        -: 1060:	    {
        -: 1061:	      if (i != currentPlayer)
        -: 1062:		{
        -: 1063:		  if ( state->handCount[i] > 4 )
        -: 1064:		    {
        -: 1065:		      //discard hand
        -: 1066:		      while( state->handCount[i] > 0 )
        -: 1067:			{
        -: 1068:			  discardCard(handPos, i, state, 0);
        -: 1069:			}
        -: 1070:							
        -: 1071:		      //draw 4
        -: 1072:		      for (j = 0; j < 4; j++)
        -: 1073:			{
        -: 1074:			  drawCard(i, state);
        -: 1075:			}
        -: 1076:		    }
        -: 1077:		}
        -: 1078:	    }
        -: 1079:				
        -: 1080:	}
        -: 1081:      return 0;*/
    #####: 1082:		return cardEffectMinion(handPos, currentPlayer,
        -: 1083:			choice1, choice2, state);
        -: 1084:		
        -: 1085:    case steward:
    #####: 1086:      if (choice1 == 1)
        -: 1087:	{
        -: 1088:	  //+2 cards
    #####: 1089:	  drawCard(currentPlayer, state);
    #####: 1090:	  drawCard(currentPlayer, state);
        -: 1091:	}
    #####: 1092:      else if (choice1 == 2)
        -: 1093:	{
        -: 1094:	  //+2 coins
    #####: 1095:	  state->coins = state->coins + 2;
        -: 1096:	}
        -: 1097:      else
        -: 1098:	{
        -: 1099:	  //trash 2 cards in hand
    #####: 1100:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1101:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1102:	}
        -: 1103:			
        -: 1104:      //discard card from hand
    #####: 1105:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:      return 0;
        -: 1107:		
        -: 1108:    case tribute:
    #####: 1109:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1110:	if (state->deckCount[nextPlayer] > 0){
    #####: 1111:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1112:	  state->deckCount[nextPlayer]--;
        -: 1113:	}
    #####: 1114:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1115:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1116:	  state->discardCount[nextPlayer]--;
        -: 1117:	}
        -: 1118:	else{
        -: 1119:	  //No Card to Reveal
    #####: 1120:	  if (DEBUG){
        -: 1121:	    printf("No cards to reveal\n");
        -: 1122:	  }
        -: 1123:	}
        -: 1124:      }
        -: 1125:	    
        -: 1126:      else{
    #####: 1127:	if (state->deckCount[nextPlayer] == 0){
    #####: 1128:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1129:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1130:	    state->deckCount[nextPlayer]++;
    #####: 1131:	    state->discard[nextPlayer][i] = -1;
    #####: 1132:	    state->discardCount[nextPlayer]--;
        -: 1133:	  }
        -: 1134:			    
    #####: 1135:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1136:	} 
    #####: 1137:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1138:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1139:	state->deckCount[nextPlayer]--;
    #####: 1140:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1141:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1142:	state->deckCount[nextPlayer]--;
        -: 1143:      }    
        -: 1144:		       
    #####: 1145:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1146:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1147:	state->playedCardCount++;
    #####: 1148:	tributeRevealedCards[1] = -1;
        -: 1149:      }
        -: 1150:
    #####: 1151:      for (i = 0; i <= 2; i ++){
    #####: 1152:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1153:	  state->coins += 2;
        -: 1154:	}
        -: 1155:		    
    #####: 1156:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1157:	  drawCard(currentPlayer, state);
    #####: 1158:	  drawCard(currentPlayer, state);
        -: 1159:	}
        -: 1160:	else{//Action Card
    #####: 1161:	  state->numActions = state->numActions + 2;
        -: 1162:	}
        -: 1163:      }
        -: 1164:	    
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case ambassador:
    #####: 1168:      j = 0;		//used to check if player has enough cards to discard
        -: 1169:
    #####: 1170:      if (choice2 > 2 || choice2 < 0)
        -: 1171:	{
    #####: 1172:	  return -1;				
        -: 1173:	}
        -: 1174:
    #####: 1175:      if (choice1 == handPos)
        -: 1176:	{
    #####: 1177:	  return -1;
        -: 1178:	}
        -: 1179:
    #####: 1180:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1181:	{
    #####: 1182:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1183:	    {
    #####: 1184:	      j++;
        -: 1185:	    }
        -: 1186:	}
    #####: 1187:      if (j < choice2)
        -: 1188:	{
    #####: 1189:	  return -1;				
        -: 1190:	}
        -: 1191:
    #####: 1192:      if (DEBUG) 
        -: 1193:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1194:
        -: 1195:      //increase supply count for choosen card by amount being discarded
    #####: 1196:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1197:			
        -: 1198:      //each other player gains a copy of revealed card
    #####: 1199:      for (i = 0; i < state->numPlayers; i++)
        -: 1200:	{
    #####: 1201:	  if (i != currentPlayer)
        -: 1202:	    {
    #####: 1203:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1204:	    }
        -: 1205:	}
        -: 1206:
        -: 1207:      //discard played card from hand
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1209:
        -: 1210:      //trash copies of cards returned to supply
    #####: 1211:      for (j = 0; j < choice2; j++)
        -: 1212:	{
    #####: 1213:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1214:	    {
    #####: 1215:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1216:		{
    #####: 1217:		  discardCard(i, currentPlayer, state, 1);
    #####: 1218:		  break;
        -: 1219:		}
        -: 1220:	    }
        -: 1221:	}			
        -: 1222:
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case cutpurse:
        -: 1226:
    #####: 1227:      updateCoins(currentPlayer, state, 2);
    #####: 1228:      for (i = 0; i < state->numPlayers; i++)
        -: 1229:	{
    #####: 1230:	  if (i != currentPlayer)
        -: 1231:	    {
    #####: 1232:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1233:		{
    #####: 1234:		  if (state->hand[i][j] == copper)
        -: 1235:		    {
    #####: 1236:		      discardCard(j, i, state, 0);
    #####: 1237:		      break;
        -: 1238:		    }
    #####: 1239:		  if (j == state->handCount[i])
        -: 1240:		    {
    #####: 1241:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1242:			{
    #####: 1243:			  if (DEBUG)
        -: 1244:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1245:			}	
    #####: 1246:		      break;
        -: 1247:		    }		
        -: 1248:		}
        -: 1249:					
        -: 1250:	    }
        -: 1251:				
        -: 1252:	}				
        -: 1253:
        -: 1254:      //discard played card from hand
    #####: 1255:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1256:
    #####: 1257:      return 0;
        -: 1258:
        -: 1259:		
        -: 1260:    case embargo: 
        -: 1261:      //+2 Coins
    #####: 1262:      state->coins = state->coins + 2;
        -: 1263:			
        -: 1264:      //see if selected pile is in play
    #####: 1265:      if ( state->supplyCount[choice1] == -1 )
        -: 1266:	{
    #####: 1267:	  return -1;
        -: 1268:	}
        -: 1269:			
        -: 1270:      //add embargo token to selected supply pile
    #####: 1271:      state->embargoTokens[choice1]++;
        -: 1272:			
        -: 1273:      //trash card
    #####: 1274:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1275:      return 0;
        -: 1276:		
        -: 1277:    case outpost:
        -: 1278:      //set outpost flag
    #####: 1279:      state->outpostPlayed++;
        -: 1280:			
        -: 1281:      //discard card
    #####: 1282:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1283:      return 0;
        -: 1284:		
        -: 1285:    case salvager:
        -: 1286:      //+1 buy
    #####: 1287:      state->numBuys++;
        -: 1288:			
    #####: 1289:      if (choice1)
        -: 1290:	{
        -: 1291:	  //gain coins equal to trashed card
    #####: 1292:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1293:	  //trash card
    #####: 1294:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1295:	}
        -: 1296:			
        -: 1297:      //discard card
    #####: 1298:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1299:      return 0;
        -: 1300:		
        -: 1301:    case sea_hag:
    #####: 1302:      for (i = 0; i < state->numPlayers; i++){
    #####: 1303:	if (i != currentPlayer){
    #####: 1304:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1305:	  state->discardCount[i]++;
    #####: 1306:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1307:	}
        -: 1308:      }
    #####: 1309:      return 0;
        -: 1310:		
        -: 1311:    case treasure_map:
        -: 1312:      //search hand for another treasure_map
    #####: 1313:      index = -1;
    #####: 1314:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1315:	{
    #####: 1316:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1317:	    {
    #####: 1318:	      index = i;
    #####: 1319:	      break;
        -: 1320:	    }
        -: 1321:	}
    #####: 1322:      if (index > -1)
        -: 1323:	{
        -: 1324:	  //trash both treasure cards
    #####: 1325:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1326:	  discardCard(index, currentPlayer, state, 1);
        -: 1327:
        -: 1328:	  //gain 4 Gold cards
    #####: 1329:	  for (i = 0; i < 4; i++)
        -: 1330:	    {
    #####: 1331:	      gainCard(gold, state, 1, currentPlayer);
        -: 1332:	    }
        -: 1333:				
        -: 1334:	  //return success
    #####: 1335:	  return 1;
        -: 1336:	}
        -: 1337:			
        -: 1338:      //no second treasure_map found in hand
    #####: 1339:      return -1;
        -: 1340:    }
        -: 1341:	
    #####: 1342:  return -1;
        -: 1343:}
        -: 1344:
        -: 1345:
    #####: 1346:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1347:{
        -: 1348:	
        -: 1349:  //if card is not trashed, added to Played pile 
    #####: 1350:  if (trashFlag < 1)
        -: 1351:    {
        -: 1352:      //add card to played pile
    #####: 1353:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1354:      state->playedCardCount++;
        -: 1355:    }
        -: 1356:	
        -: 1357:  //set played card to -1
    #####: 1358:  state->hand[currentPlayer][handPos] = -1;
        -: 1359:	
        -: 1360:  //remove card from player's hand
    #####: 1361:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1362:    {
        -: 1363:      //reduce number of cards in hand
    #####: 1364:      state->handCount[currentPlayer]--;
        -: 1365:    }
    #####: 1366:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1367:    {
        -: 1368:      //reduce number of cards in hand
    #####: 1369:      state->handCount[currentPlayer]--;
        -: 1370:    }
        -: 1371:  else 	
        -: 1372:    {
        -: 1373:      //replace discarded card with last card in hand
    #####: 1374:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1375:      //set last card to -1
    #####: 1376:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1377:      //reduce number of cards in hand
    #####: 1378:      state->handCount[currentPlayer]--;
        -: 1379:    }
        -: 1380:	
    #####: 1381:  return 0;
        -: 1382:}
        -: 1383:
    #####: 1384:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1385:{
        -: 1386:  //Note: supplyPos is enum of choosen card
        -: 1387:	
        -: 1388:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1389:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1390:    {
    #####: 1391:      return -1;
        -: 1392:    }
        -: 1393:	
        -: 1394:  //added card for [whoseTurn] current player:
        -: 1395:  // toFlag = 0 : add to discard
        -: 1396:  // toFlag = 1 : add to deck
        -: 1397:  // toFlag = 2 : add to hand
        -: 1398:
    #####: 1399:  if (toFlag == 1)
        -: 1400:    {
    #####: 1401:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1402:      state->deckCount[player]++;
        -: 1403:    }
    #####: 1404:  else if (toFlag == 2)
        -: 1405:    {
    #####: 1406:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1407:      state->handCount[player]++;
        -: 1408:    }
        -: 1409:  else
        -: 1410:    {
    #####: 1411:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1412:      state->discardCount[player]++;
        -: 1413:    }
        -: 1414:	
        -: 1415:  //decrease number in supply pile
    #####: 1416:  state->supplyCount[supplyPos]--;
        -: 1417:	 
    #####: 1418:  return 0;
        -: 1419:}
        -: 1420:
    10000: 1421:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1422:{
        -: 1423:  int i;
        -: 1424:	
        -: 1425:  //reset coin count
    10000: 1426:  state->coins = 0;
        -: 1427:
        -: 1428:  //add coins for each Treasure card in player's hand
    60000: 1429:  for (i = 0; i < state->handCount[player]; i++)
        -: 1430:    {
    50000: 1431:      if (state->hand[player][i] == copper)
        -: 1432:	{
    35063: 1433:	  state->coins += 1;
        -: 1434:	}
    14937: 1435:      else if (state->hand[player][i] == silver)
        -: 1436:	{
    #####: 1437:	  state->coins += 2;
        -: 1438:	}
    14937: 1439:      else if (state->hand[player][i] == gold)
        -: 1440:	{
    #####: 1441:	  state->coins += 3;
        -: 1442:	}	
        -: 1443:    }	
        -: 1444:
        -: 1445:  //add bonus
    10000: 1446:  state->coins += bonus;
        -: 1447:
    10000: 1448:  return 0;
        -: 1449:}
        -: 1450:
        -: 1451:
        -: 1452://end of dominion.c
        -: 1453:
