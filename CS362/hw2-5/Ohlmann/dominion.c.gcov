        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3626 returned 100% blocks executed 100%
     3626:    8:int compare(const void* a, const void* b) {
     3626:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
     1656:   10:    return 1;
     1970:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      538:   12:    return -1;
     1432:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2 returned 100% blocks executed 89%
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        2:   44:  SelectStream(1);
call    0 returned 100%
        2:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        2:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       22:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       18:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        8:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
        6:  140:      state->deckCount[i] = 0;
       24:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       18:  143:	  state->deck[i][j] = estate;
       18:  144:	  state->deckCount[i]++;
        -:  145:	}
       48:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       42:  148:	  state->deck[i][j] = copper;
       42:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        8:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
        6:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        8:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        6:  166:      state->handCount[i] = 0;
        6:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        2:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 128 returned 100% blocks executed 93%
      128:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      128:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      128:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      128:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1636:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
     1380:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1380:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1380:  217:    newDeckPos++;
     7128:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
     5748:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1380:  221:    state->deckCount[player]--;
        -:  222:  }
     1508:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
     1380:  224:    state->deck[player][i] = newDeck[i];
     1380:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      128:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 68 returned 100% blocks executed 79%
       68:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       68:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       68:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
        -:  239:		//printf("\n\nERROR PLAYING CARD: Phase\n\n");
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
       68:  244:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  245:    {
        -:  246:		//printf("\n\nERROR PLAYING CARD: Actions\n\n");
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
       68:  251:  card = handCard(handPos, state);
call    0 returned 100%
        -:  252:	
        -:  253:  //check if selected card is an action
       68:  254:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  255:    {
        -:  256:		//printf("\n\nERROR PLAYING CARD: Not an Action Card\n\n");
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
       68:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 24% (fallthrough)
branch  2 taken 76%
        -:  262:    {
        -:  263:		//printf("\n\nERROR PLAYING CARD: cardEffect() failed.\n\n");
       16:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //reduce number of actions
       52:  268:  state->numActions--;
        -:  269:
        -:  270:  //update coins (Treasure cards may be added with card draws)
       52:  271:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  272:	
       52:  273:  return 0;
        -:  274:}
        -:  275:
function buyCard called 192 returned 100% blocks executed 65%
      192:  276:int buyCard(int supplyPos, struct gameState *state) {
        -:  277:  int who;
      192:  278:  if (DEBUG){
        -:  279:    printf("Entering buyCard...\n");
        -:  280:  }
        -:  281:
        -:  282:  // I don't know what to do about the phase thing.
        -:  283:
      192:  284:  who = state->whoseTurn;
        -:  285:
      192:  286:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  287:    if (DEBUG)
        -:  288:      printf("You do not have any buys left\n");
    #####:  289:    return -1;
      192:  290:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
    #####:  293:    return -1;
      192:  294:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  295:    if (DEBUG) 
        -:  296:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  297:    return -1;
        -:  298:  } else {
      192:  299:    state->phase=1;
        -:  300:    //state->supplyCount[supplyPos]--;
      192:  301:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  302:  
      192:  303:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
      192:  304:    state->numBuys--;
      192:  305:    if (DEBUG)
        -:  306:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:  }
        -:  308:
        -:  309:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:  //state->discardCount[who]++;
        -:  311:    
      192:  312:  return 0;
        -:  313:}
        -:  314:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  315:int numHandCards(struct gameState *state) {
    #####:  316:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  317:}
        -:  318:
function handCard called 68 returned 100% blocks executed 100%
       68:  319:int handCard(int handPos, struct gameState *state) {
       68:  320:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       68:  321:  return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
function supplyCount called 2156 returned 100% blocks executed 100%
     2156:  324:int supplyCount(int card, struct gameState *state) {
     2156:  325:  return state->supplyCount[card];
        -:  326:}
        -:  327:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:  int i;
    #####:  330:  int count = 0;
        -:  331:
    #####:  332:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  340:    }
        -:  341:
    #####:  342:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  345:    }
        -:  346:
    #####:  347:  return count;
        -:  348:}
        -:  349:
function whoseTurn called 628 returned 100% blocks executed 100%
      628:  350:int whoseTurn(struct gameState *state) {
      628:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
function endTurn called 246 returned 100% blocks executed 100%
      246:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
      246:  357:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  358:  
        -:  359:  //Discard hand
     1456:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     1210:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     1210:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
      246:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
      246:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
      164:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
       82:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
      246:  374:  state->outpostPlayed = 0;
      246:  375:  state->phase = 0;
      246:  376:  state->numActions = 1;
      246:  377:  state->coins = 0;
      246:  378:  state->numBuys = 1;
      246:  379:  state->playedCardCount = 0;
      246:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
     1476:  384:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     1230:  385:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  386:  }
        -:  387:
        -:  388:  //Update money
      246:  389:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  390:
      246:  391:  return 0;
        -:  392:}
        -:  393:
function isGameOver called 84 returned 100% blocks executed 91%
       84:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:	
        -:  398:  //if stack of Province cards is empty, the game ends
       84:  399:  if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  400:    {
    #####:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
       84:  405:  j = 0;
     2184:  406:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  407:    {
     2100:  408:      if (state->supplyCount[i] == 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  409:	{
       68:  410:	  j++;
        -:  411:	}
        -:  412:    }
       84:  413:  if ( j >= 3)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  414:    {
        2:  415:      return 1;
        -:  416:    }
        -:  417:
       82:  418:  return 0;
        -:  419:}
        -:  420:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
    #####:  424:  int score = 0;
        -:  425:  //score from hand
    #####:  426:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  427:    {
    #####:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  434:    }
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  445:    }
        -:  446:
        -:  447:  //score from deck
    #####:  448:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  449:    {
    #####:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  456:    }
        -:  457:
    #####:  458:  return score;
        -:  459:}
        -:  460:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;	
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  472:	{
    #####:  473:	  players[i] = -9999;
        -:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  497:	{
    #####:  498:	  players[i]++;
        -:  499:	}
        -:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  507:	{
    #####:  508:	  j = i;
        -:  509:	}
        -:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  517:	{
    #####:  518:	  players[i] = 1;
        -:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
        -:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
function drawCard called 1256 returned 100% blocks executed 93%
     1256:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
     1256:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
     1414:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
     1296:  538:      state->deck[player][i] = state->discard[player][i];
     1296:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
      118:  542:    state->deckCount[player] = state->discardCount[player];
      118:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
      118:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  547:   
      118:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
      118:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
      118:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
      118:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
      118:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
      118:  563:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  564:      return -1;
        -:  565:
      118:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      118:  567:    state->deckCount[player]--;
      118:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
     1138:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
     1138:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
     1138:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1138:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1138:  580:    state->deckCount[player]--;
     1138:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
     1256:  584:  return 0;
        -:  585:}
        -:  586:
function getCost called 5572 returned 100% blocks executed 97%
     5572:  587:int getCost(int cardNumber)
        -:  588:{
     5572:  589:  switch( cardNumber ) 
branch  0 taken 5%
branch  1 taken 4%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 5%
branch  5 taken 4%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 4%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 4%
branch 18 taken 3%
branch 19 taken 4%
branch 20 taken 3%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 4%
branch 26 taken 3%
branch 27 taken 0%
        -:  590:    {
        -:  591:    case curse:
      274:  592:      return 0;
        -:  593:    case estate:
      240:  594:      return 2;
        -:  595:    case duchy:
      192:  596:      return 5;
        -:  597:    case province:
      192:  598:      return 8;
        -:  599:    case copper:
      284:  600:      return 0;
        -:  601:    case silver:
      238:  602:      return 3;
        -:  603:    case gold:
      192:  604:      return 6;
        -:  605:    case adventurer:
      192:  606:      return 6;
        -:  607:    case council_room:
      192:  608:      return 5;
        -:  609:    case feast:
      192:  610:      return 4;
        -:  611:    case gardens:
      204:  612:      return 4;
        -:  613:    case mine:
      200:  614:      return 5;
        -:  615:    case remodel:
      192:  616:      return 4;
        -:  617:    case smithy:
      192:  618:      return 4;
        -:  619:    case village:
      224:  620:      return 3;
        -:  621:    case baron:
      192:  622:      return 4;
        -:  623:    case great_hall:
      192:  624:      return 3;
        -:  625:    case minion:
      196:  626:      return 5;
        -:  627:    case steward:
      192:  628:      return 3;
        -:  629:    case tribute:
      196:  630:      return 5;
        -:  631:    case ambassador:
      192:  632:      return 3;
        -:  633:    case cutpurse:
      208:  634:      return 4;
        -:  635:    case embargo: 
      232:  636:      return 2;
        -:  637:    case outpost:
      192:  638:      return 5;
        -:  639:    case salvager:
      192:  640:      return 4;
        -:  641:    case sea_hag:
      196:  642:      return 4;
        -:  643:    case treasure_map:
      192:  644:      return 4;
        -:  645:    }
        -:  646:	
    #####:  647:  return -1;
        -:  648:}
        -:  649:
function cardEffect called 68 returned 100% blocks executed 25%
       68:  650:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  651:{
        -:  652:  int i;
        -:  653:  int j;
        -:  654:  int k;
        -:  655:  int x;
        -:  656:  int index;
       68:  657:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       68:  658:  int nextPlayer = currentPlayer + 1;
        -:  659:
       68:  660:  int tributeRevealedCards[2] = {-1, -1};
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
       68:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
       68:  664:  int z = 0;// this is the counter for the temp hand
       68:  665:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        2:  666:    nextPlayer = 0;
        -:  667:  }
        -:  668:  
        -:  669:	
        -:  670:  //uses switch to select card and perform actions
       68:  671:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 12%
branch  4 taken 12%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 18%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 3%
branch 11 taken 0%
branch 12 taken 15%
branch 13 taken 0%
branch 14 taken 9%
branch 15 taken 24%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 9%
branch 19 taken 0%
branch 20 taken 0%
        -:  672:    {
        -:  673:    case adventurer:
    #####:  674:      while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  675:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  676:	  shuffle(currentPlayer, state);
call    0 never executed
        -:  677:	}
    #####:  678:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  679:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  680:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  681:	  drawntreasure++;
        -:  682:	else{
    #####:  683:	  temphand[z]=cardDrawn;
    #####:  684:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  685:	  z++;
        -:  686:	}
        -:  687:      }
    #####:  688:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  689:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  690:	z=z-1;
        -:  691:      }
    #####:  692:      return 0;
        -:  693:			
        -:  694:    case council_room:
        -:  695:      //+4 Cards
    #####:  696:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  699:	}
        -:  700:			
        -:  701:      //+1 Buy
    #####:  702:      state->numBuys++;
        -:  703:			
        -:  704:      //Each other player draws a card
    #####:  705:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      drawCard(i, state);
call    0 never executed
        -:  710:	    }
        -:  711:	}
        -:  712:			
        -:  713:      //put played card in played card pile
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  715:			
    #####:  716:      return 0;
        -:  717:			
        -:  718:    case feast:
        -:  719:      //gain card with cost up to 5
        -:  720:      //Backup hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  722:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  724:      }
        -:  725:      //Backup hand
        -:  726:
        -:  727:      //Update Coins for Buy
    #####:  728:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  729:      x = 1;//Condition to loop on
    #####:  730:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  731:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  732:	  if (DEBUG)
        -:  733:	    printf("None of that card left, sorry!\n");
        -:  734:
    #####:  735:	  if (DEBUG){
        -:  736:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:	  }
        -:  738:	}
    #####:  739:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  740:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  741:
    #####:  742:	  if (DEBUG){
        -:  743:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:	  }
        -:  745:	}
        -:  746:	else{
        -:  747:
    #####:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
    #####:  752:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  753:	  x = 0;//No more buying cards
        -:  754:
    #####:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
        -:  759:	}
        -:  760:      }     
        -:  761:
        -:  762:      //Reset Hand
    #####:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  764:	state->hand[currentPlayer][i] = temphand[i];
    #####:  765:	temphand[i] = -1;
        -:  766:      }
        -:  767:      //Reset Hand
        -:  768:      			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case gardens:
        8:  772:      return -1;
        -:  773:			
        -:  774:    case mine:
        8:  775:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  776:
        8:  777:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 67% (fallthrough)
branch  3 taken 33%
        -:  778:	{
        6:  779:	  return -1;
        -:  780:	}
        -:  781:		
        2:  782:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
        2:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  788:	{
        2:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  803:	      break;
        -:  804:	    }
        -:  805:	}
        -:  806:			
    #####:  807:      return 0;
        -:  808:			
        -:  809:    case remodel:
    #####:  810:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  811:
    #####:  812:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  813:	{
    #####:  814:	  return -1;
        -:  815:	}
        -:  816:
    #####:  817:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  818:
        -:  819:      //discard card from hand
    #####:  820:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  821:
        -:  822:      //discard trashed card
    #####:  823:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  826:	    {
    #####:  827:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  828:	      break;
        -:  829:	    }
        -:  830:	}
        -:  831:
        -:  832:
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case smithy:
        -:  836:      //+3 Cards
        -:  837:      //for (i = 0; i < 3; i++)
        -:  838:	//{
        -:  839:	  //drawCard(currentPlayer, state);
        -:  840:	//}
        -:  841:			
        -:  842:      //discard card from hand
        -:  843:      //discardCard(handPos, currentPlayer, state, 0);
    #####:  844:      caseSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####:  845:      return 0;
        -:  846:		
        -:  847:    case village:
        -:  848:      //+1 Card
        -:  849:      //drawCard(currentPlayer, state);
        -:  850:			
        -:  851:      //+2 Actions
        -:  852:      //state->numActions = state->numActions + 2;
        -:  853:			
        -:  854:      //discard played card from hand
        -:  855:      //discardCard(handPos, currentPlayer, state, 0);
       12:  856:      caseVillage(currentPlayer, state, state->numActions, handPos);
call    0 returned 100%
       12:  857:      return 0;
        -:  858:		
        -:  859:    case baron:
    #####:  860:      state->numBuys++;//Increase buys by 1!
    #####:  861:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  862:	int p = 0;//Iterator for hand!
    #####:  863:	int card_not_discarded = 1;//Flag for discard set!
    #####:  864:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  865:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  866:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  867:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  868:	    state->discardCount[currentPlayer]++;
    #####:  869:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  870:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  871:	    }
    #####:  872:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  873:	    state->handCount[currentPlayer]--;
    #####:  874:	    card_not_discarded = 0;//Exit the loop
        -:  875:	  }
    #####:  876:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
    #####:  877:	    if(DEBUG) {
        -:  878:	      printf("No estate cards in your hand, invalid choice\n");
        -:  879:	      printf("Must gain an estate if there are any\n");
        -:  880:	    }
    #####:  881:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  882:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  883:	      state->supplyCount[estate]--;//Decrement estates
    #####:  884:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  885:		isGameOver(state);
call    0 never executed
        -:  886:	      }
        -:  887:	    }
    #####:  888:	    card_not_discarded = 0;//Exit the loop
        -:  889:	  }
        -:  890:			    
        -:  891:	  else{
    #####:  892:	    p++;//Next card
        -:  893:	  }
        -:  894:	}
        -:  895:      }
        -:  896:			    
        -:  897:      else{
    #####:  898:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  899:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  900:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  901:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  902:	    isGameOver(state);
call    0 never executed
        -:  903:	  }
        -:  904:	}
        -:  905:      }
        -:  906:	    
        -:  907:      
    #####:  908:      return 0;
        -:  909:		
        -:  910:    case great_hall:
        -:  911:      //+1 Card
        -:  912:      //drawCard(currentPlayer, state);
        -:  913:			
        -:  914:      //+1 Actions
        -:  915:      //state->numActions++;
        -:  916:			
        -:  917:      //discard card from hand
        -:  918:      //discardCard(handPos, currentPlayer, state, 0);
    #####:  919:      caseGreatHall(currentPlayer, state, state->numActions, handPos);
call    0 never executed
    #####:  920:      return 0;
        -:  921:		
        -:  922:    case minion:
        -:  923:      //+1 action
        2:  924:      state->numActions++;
        -:  925:			
        -:  926:      //discard card from hand
        2:  927:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  928:			
        2:  929:      if (choice1)		//+2 coins
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  930:	{
        2:  931:	  state->coins = state->coins + 2;
        -:  932:	}
        -:  933:			
    #####:  934:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  935:	{
        -:  936:	  //discard hand
    #####:  937:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  938:	    {
    #####:  939:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  940:	    }
        -:  941:				
        -:  942:	  //draw 4
    #####:  943:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  944:	    {
    #####:  945:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  946:	    }
        -:  947:				
        -:  948:	  //other players discard hand and redraw if hand size > 4
    #####:  949:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  950:	    {
    #####:  951:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  952:		{
    #####:  953:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  954:		    {
        -:  955:		      //discard hand
    #####:  956:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  957:			{
    #####:  958:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  959:			}
        -:  960:							
        -:  961:		      //draw 4
    #####:  962:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  963:			{
    #####:  964:			  drawCard(i, state);
call    0 never executed
        -:  965:			}
        -:  966:		    }
        -:  967:		}
        -:  968:	    }
        -:  969:				
        -:  970:	}
        2:  971:      return 0;
        -:  972:		
        -:  973:    case steward:
    #####:  974:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  975:	{
        -:  976:	  //+2 cards
    #####:  977:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  978:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  979:	}
    #####:  980:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //+2 coins
    #####:  983:	  state->coins = state->coins + 2;
        -:  984:	}
        -:  985:      else
        -:  986:	{
        -:  987:	  //trash 2 cards in hand
    #####:  988:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  989:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  990:	}
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case tribute:
       10:  997:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  998:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  999:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1000:	  state->deckCount[nextPlayer]--;
        -: 1001:	}
    #####: 1002:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1003:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1004:	  state->discardCount[nextPlayer]--;
        -: 1005:	}
        -: 1006:	else{
        -: 1007:	  //No Card to Reveal
    #####: 1008:	  if (DEBUG){
        -: 1009:	    printf("No cards to reveal\n");
        -: 1010:	  }
        -: 1011:	}
        -: 1012:      }
        -: 1013:	    
        -: 1014:      else{
       10: 1015:	if (state->deckCount[nextPlayer] == 0){
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
       28: 1016:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       24: 1017:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
       24: 1018:	    state->deckCount[nextPlayer]++;
       24: 1019:	    state->discard[nextPlayer][i] = -1;
       24: 1020:	    state->discardCount[nextPlayer]--;
        -: 1021:	  }
        -: 1022:			    
        4: 1023:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 returned 100%
        -: 1024:	} 
       10: 1025:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       10: 1026:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       10: 1027:	state->deckCount[nextPlayer]--;
       10: 1028:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       10: 1029:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       10: 1030:	state->deckCount[nextPlayer]--;
        -: 1031:      }    
        -: 1032:		       
       10: 1033:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        6: 1034:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        6: 1035:	state->playedCardCount++;
        6: 1036:	tributeRevealedCards[1] = -1;
        -: 1037:      }
        -: 1038:
       40: 1039:      for (i = 0; i <= 2; i ++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       32: 1040:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2: 1041:	  state->coins += 2;
        -: 1042:	}
        -: 1043:		    
       30: 1044:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
        2: 1045:	  drawCard(currentPlayer, state);
call    0 returned 100%
        2: 1046:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1047:	}
        -: 1048:	else{//Action Card
       26: 1049:	  state->numActions = state->numActions + 2;
        -: 1050:	}
        -: 1051:      }
        -: 1052:	    
       10: 1053:      return 0;
        -: 1054:		
        -: 1055:    case ambassador:
    #####: 1056:      j = 0;		//used to check if player has enough cards to discard
        -: 1057:
    #####: 1058:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1059:	{
    #####: 1060:	  return -1;				
        -: 1061:	}
        -: 1062:
    #####: 1063:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1071:	    {
    #####: 1072:	      j++;
        -: 1073:	    }
        -: 1074:	}
    #####: 1075:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
    #####: 1077:	  return -1;				
        -: 1078:	}
        -: 1079:
    #####: 1080:      if (DEBUG) 
        -: 1081:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1082:
        -: 1083:      //increase supply count for choosen card by amount being discarded
    #####: 1084:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1085:			
        -: 1086:      //each other player gains a copy of revealed card
    #####: 1087:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1090:	    {
    #####: 1091:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1092:	    }
        -: 1093:	}
        -: 1094:
        -: 1095:      //discard played card from hand
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1097:
        -: 1098:      //trash copies of cards returned to supply
    #####: 1099:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:	    {
    #####: 1103:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1104:		{
    #####: 1105:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1106:		  break;
        -: 1107:		}
        -: 1108:	    }
        -: 1109:	}			
        -: 1110:
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case cutpurse:
        -: 1114:
        6: 1115:      updateCoins(currentPlayer, state, 2);
call    0 returned 100%
       24: 1116:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1117:	{
       18: 1118:	  if (i != currentPlayer)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1119:	    {
       12: 1120:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1121:		{
    #####: 1122:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1123:		    {
    #####: 1124:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1125:		      break;
        -: 1126:		    }
    #####: 1127:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1128:		    {
    #####: 1129:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1130:			{
    #####: 1131:			  if (DEBUG)
        -: 1132:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1133:			}	
    #####: 1134:		      break;
        -: 1135:		    }		
        -: 1136:		}
        -: 1137:					
        -: 1138:	    }
        -: 1139:				
        -: 1140:	}				
        -: 1141:
        -: 1142:      //discard played card from hand
        6: 1143:      discardCard(handPos, currentPlayer, state, 0);			
call    0 returned 100%
        -: 1144:
        6: 1145:      return 0;
        -: 1146:
        -: 1147:		
        -: 1148:    case embargo: 
        -: 1149:      //+2 Coins
       16: 1150:      state->coins = state->coins + 2;
        -: 1151:			
        -: 1152:      //see if selected pile is in play
       16: 1153:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1154:	{
    #####: 1155:	  return -1;
        -: 1156:	}
        -: 1157:			
        -: 1158:      //add embargo token to selected supply pile
       16: 1159:      state->embargoTokens[choice1]++;
        -: 1160:			
        -: 1161:      //trash card
       16: 1162:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 100%
       16: 1163:      return 0;
        -: 1164:		
        -: 1165:    case outpost:
        -: 1166:      //set outpost flag
        -: 1167:      //state->outpostPlayed++;
        -: 1168:			
        -: 1169:      //discard card
        -: 1170:      //discardCard(handPos, currentPlayer, state, 0);
    #####: 1171:      caseOutpost(state->outpostPlayed, handPos, currentPlayer, state);
call    0 never executed
    #####: 1172:      return 0;
        -: 1173:		
        -: 1174:    case salvager:
        -: 1175:      //+1 buy
        -: 1176:      //state->numBuys++;
        -: 1177:			
        -: 1178:      //if (choice1)
        -: 1179:	//{
        -: 1180:	  //gain coins equal to trashed card
        -: 1181:	  //state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1182:	  //trash card
        -: 1183:	  //discardCard(choice1, currentPlayer, state, 1);	
        -: 1184:	//}
        -: 1185:			
        -: 1186:      //discard card
        -: 1187:      //discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      caseSalvager(state->numBuys, choice1, state->coins, handPos, currentPlayer, state);
call    0 never executed
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case sea_hag:
       24: 1192:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       18: 1193:	if (i != currentPlayer){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       12: 1194:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
       12: 1195:	  state->discardCount[i]++;
       12: 1196:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1197:	}
        -: 1198:      }
        6: 1199:      return 0;
        -: 1200:		
        -: 1201:    case treasure_map:
        -: 1202:      //search hand for another treasure_map
    #####: 1203:      index = -1;
    #####: 1204:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1205:	{
    #####: 1206:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1207:	    {
    #####: 1208:	      index = i;
    #####: 1209:	      break;
        -: 1210:	    }
        -: 1211:	}
    #####: 1212:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
        -: 1214:	  //trash both treasure cards
    #####: 1215:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1216:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1217:
        -: 1218:	  //gain 4 Gold cards
    #####: 1219:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1220:	    {
    #####: 1221:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1222:	    }
        -: 1223:				
        -: 1224:	  //return success
    #####: 1225:	  return 1;
        -: 1226:	}
        -: 1227:			
        -: 1228:      //no second treasure_map found in hand
    #####: 1229:      return -1;
        -: 1230:    }
        -: 1231:	
    #####: 1232:  return -1;
        -: 1233:}
        -: 1234:
function discardCard called 36 returned 100% blocks executed 75%
       36: 1235:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1236:{
        -: 1237:	
        -: 1238:  //if card is not trashed, added to Played pile 
       36: 1239:  if (trashFlag < 1)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -: 1240:    {
        -: 1241:      //add card to played pile
       20: 1242:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       20: 1243:      state->playedCardCount++;
        -: 1244:    }
        -: 1245:	
        -: 1246:  //set played card to -1
       36: 1247:  state->hand[currentPlayer][handPos] = -1;
        -: 1248:	
        -: 1249:  //remove card from player's hand
       36: 1250:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1251:    {
        -: 1252:      //reduce number of cards in hand
    #####: 1253:      state->handCount[currentPlayer]--;
        -: 1254:    }
       36: 1255:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1256:    {
        -: 1257:      //reduce number of cards in hand
    #####: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
        -: 1260:  else 	
        -: 1261:    {
        -: 1262:      //replace discarded card with last card in hand
       36: 1263:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1264:      //set last card to -1
       36: 1265:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1266:      //reduce number of cards in hand
       36: 1267:      state->handCount[currentPlayer]--;
        -: 1268:    }
        -: 1269:	
       36: 1270:  return 0;
        -: 1271:}
        -: 1272:
function gainCard called 192 returned 100% blocks executed 70%
      192: 1273:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1274:{
        -: 1275:  //Note: supplyPos is enum of choosen card
        -: 1276:	
        -: 1277:  //check if supply pile is empty (0) or card is not used in game (-1)
      192: 1278:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1279:    {
    #####: 1280:      return -1;
        -: 1281:    }
        -: 1282:	
        -: 1283:  //added card for [whoseTurn] current player:
        -: 1284:  // toFlag = 0 : add to discard
        -: 1285:  // toFlag = 1 : add to deck
        -: 1286:  // toFlag = 2 : add to hand
        -: 1287:
      192: 1288:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1289:    {
    #####: 1290:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1291:      state->deckCount[player]++;
        -: 1292:    }
      192: 1293:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1294:    {
    #####: 1295:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1296:      state->handCount[player]++;
        -: 1297:    }
        -: 1298:  else
        -: 1299:    {
      192: 1300:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      192: 1301:      state->discardCount[player]++;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //decrease number in supply pile
      192: 1305:  state->supplyCount[supplyPos]--;
        -: 1306:	 
      192: 1307:  return 0;
        -: 1308:}
        -: 1309:
function updateCoins called 306 returned 100% blocks executed 90%
      306: 1310:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1311:{
        -: 1312:  int i;
        -: 1313:	
        -: 1314:  //reset coin count
      306: 1315:  state->coins = 0;
        -: 1316:
        -: 1317:  //add coins for each Treasure card in player's hand
     1816: 1318:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1319:    {
     1510: 1320:      if (state->hand[player][i] == copper)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -: 1321:	{
      534: 1322:	  state->coins += 1;
        -: 1323:	}
      976: 1324:      else if (state->hand[player][i] == silver)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1325:	{
       78: 1326:	  state->coins += 2;
        -: 1327:	}
      898: 1328:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1329:	{
    #####: 1330:	  state->coins += 3;
        -: 1331:	}	
        -: 1332:    }	
        -: 1333:
        -: 1334:  //add bonus
      306: 1335:  state->coins += bonus;
        -: 1336:
      306: 1337:  return 0;
        -: 1338:}
function caseSmithy called 0 returned 0% blocks executed 0%
    #####: 1339:void caseSmithy(int player, struct gameState *gstate, int hand)
        -: 1340:{
        -: 1341:	int i;
    #####: 1342:	for (i = 1; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1343:	{
    #####: 1344:		drawCard(player, gstate);
call    0 never executed
        -: 1345:	}
        -: 1346:
    #####: 1347:	discardCard(hand, player, gstate, 0);
call    0 never executed
    #####: 1348:	return;
        -: 1349:}
        -: 1350:
function caseVillage called 12 returned 100% blocks executed 100%
       12: 1351:void caseVillage(int player, struct gameState *gstate, int actions, int hand)
        -: 1352:{
       12: 1353:	drawCard(player, gstate);
call    0 returned 100%
       12: 1354:	actions = actions + 2;
       12: 1355:	discardCard(hand, player, gstate, 0);
call    0 returned 100%
       12: 1356:	return;
        -: 1357:}
        -: 1358:
function caseGreatHall called 0 returned 0% blocks executed 0%
    #####: 1359:void caseGreatHall(int player, struct gameState *gstate, int actions, int hand)
        -: 1360:{
    #####: 1361:	drawCard(player, gstate);
call    0 never executed
    #####: 1362:	actions++;
    #####: 1363:	discardCard(hand, player, gstate, 0);
call    0 never executed
    #####: 1364:	return;
        -: 1365:}
        -: 1366:
function caseOutpost called 0 returned 0% blocks executed 0%
    #####: 1367:void caseOutpost(int outposts, int hand, int player, struct gameState *gstate)
        -: 1368:{
    #####: 1369:	outposts++;
    #####: 1370:	discardCard(hand, player, gstate, 0);
call    0 never executed
    #####: 1371:	return;
        -: 1372:}
        -: 1373:
function caseSalvager called 0 returned 0% blocks executed 0%
    #####: 1374:void caseSalvager(int purchases, int choice1, int coins, int hand, int player, struct gameState *gstate)
        -: 1375:{
    #####: 1376:	purchases++;
    #####: 1377:	if(choice1)
branch  0 never executed
branch  1 never executed
        -: 1378:	{
    #####: 1379:		coins = coins + getCost( handCard(choice1, gstate) );
call    0 never executed
call    1 never executed
    #####: 1380:		discardCard(choice1, player, gstate, 1);
call    0 never executed
        -: 1381:	}
    #####: 1382:	discardCard(hand, player, gstate, 0);
call    0 never executed
    #####: 1383:	return;
        -: 1384:}
        -: 1385:
        -: 1386://end of dominion.c
        -: 1387:
