--------------------------------------------------------------------------------
Command:            prog
Massif arguments:   (none)
ms_print arguments: massif.out.11959
--------------------------------------------------------------------------------


    KB
500.0^                  :::::::::::::::::::::::::::::::::::::::::::::::::::::#
     |                  :                                                    #
     |                  :                                                    #
     |                  :                                                    #
     |                  :                                                    #
     |                  :                                                    #
     |                  :                                                    #
     |                  :                                                    #
     |                  :                                                    #
     |                  :                                                    #
     |    ::::::::::::::@                                                    #
     |    :             @                                                    #
     |    :             @                                                    #
     |    :             @                                                    #
     |    :             @                                                    #
     | :::@             @                                                    #
     | :  @             @                                                    #
     | :  @             @                                                    #
     |:@  @             @                                                    #
     |@@  @             @                                                    #
   0 +----------------------------------------------------------------------->Gi
     0                                                                   142.4

Number of snapshots: 41
 Detailed snapshots: [3, 8, 13, 18, 23, 28, 33, 38 (peak)]

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  0              0                0                0             0            0
  1         98,698               24               16             8            0
  2         98,749            4,032            4,016            16            0
  3      7,190,516            4,032            4,016            16            0
99.60% (4,016B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.
->99.21% (4,000B) 0x400691: _initDynArr (dynamicArray.c:30)
| ->99.21% (4,000B) 0x400740: createDynArr (dynamicArray.c:51)
|   ->99.21% (4,000B) 0x400FC7: main (dynamicArrayMain.c:21)
|     
->00.40% (16B) in 1+ places, all below ms_print's threshold (01.00%)

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  4      7,190,516               24               16             8            0
  5      7,190,555                0                0             0            0
  6      7,190,597               24               16             8            0
  7      7,190,648            8,032            8,016            16            0
  8     35,363,604            8,032            8,016            16            0
99.80% (8,016B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.
->99.60% (8,000B) 0x400691: _initDynArr (dynamicArray.c:30)
| ->99.60% (8,000B) 0x400740: createDynArr (dynamicArray.c:51)
|   ->99.60% (8,000B) 0x400FC7: main (dynamicArrayMain.c:21)
|     
->00.20% (16B) in 1+ places, all below ms_print's threshold (01.00%)

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  9     35,363,604               24               16             8            0
 10     35,363,643                0                0             0            0
 11     35,363,685               24               16             8            0
 12     35,363,736           16,032           16,016            16            0
 13    147,706,749           16,032           16,016            16            0
99.90% (16,016B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.
->99.80% (16,000B) 0x400691: _initDynArr (dynamicArray.c:30)
| ->99.80% (16,000B) 0x400740: createDynArr (dynamicArray.c:51)
|   ->99.80% (16,000B) 0x400FC7: main (dynamicArrayMain.c:21)
|     
->00.10% (16B) in 1+ places, all below ms_print's threshold (01.00%)

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 14    147,706,749               24               16             8            0
 15    147,706,788                0                0             0            0
 16    147,706,830               24               16             8            0
 17    147,706,881           32,032           32,016            16            0
 18    596,390,121           32,032           32,016            16            0
99.95% (32,016B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.
->99.90% (32,000B) 0x400691: _initDynArr (dynamicArray.c:30)
| ->99.90% (32,000B) 0x400740: createDynArr (dynamicArray.c:51)
|   ->99.90% (32,000B) 0x400FC7: main (dynamicArrayMain.c:21)
|     
->00.05% (16B) in 1+ places, all below ms_print's threshold (01.00%)

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 19    596,390,121               24               16             8            0
 20    596,390,160                0                0             0            0
 21    596,390,202               24               16             8            0
 22    596,390,253           64,032           64,016            16            0
 23  2,389,753,743           64,032           64,016            16            0
99.98% (64,016B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.
->99.95% (64,000B) 0x400691: _initDynArr (dynamicArray.c:30)
| ->99.95% (64,000B) 0x400740: createDynArr (dynamicArray.c:51)
|   ->99.95% (64,000B) 0x400FC7: main (dynamicArrayMain.c:21)
|     
->00.02% (16B) in 1+ places, all below ms_print's threshold (01.00%)

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 24  2,389,753,743               24               16             8            0
 25  2,389,753,782                0                0             0            0
 26  2,389,753,824               24               16             8            0
 27  2,389,753,875          128,032          128,016            16            0
 28  9,560,477,365          128,032          128,016            16            0
99.99% (128,016B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.
->99.98% (128,000B) 0x400691: _initDynArr (dynamicArray.c:30)
| ->99.98% (128,000B) 0x400740: createDynArr (dynamicArray.c:51)
|   ->99.98% (128,000B) 0x400FC7: main (dynamicArrayMain.c:21)
|     
->00.01% (16B) in 1+ places, all below ms_print's threshold (01.00%)

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 29  9,560,477,365               24               16             8            0
 30  9,560,477,404                0                0             0            0
 31  9,560,477,446               24               16             8            0
 32  9,560,477,497          256,032          256,016            16            0
 33 38,237,921,208          256,032          256,016            16            0
99.99% (256,016B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.
->99.99% (256,000B) 0x400691: _initDynArr (dynamicArray.c:30)
| ->99.99% (256,000B) 0x400740: createDynArr (dynamicArray.c:51)
|   ->99.99% (256,000B) 0x400FC7: main (dynamicArrayMain.c:21)
|     
->00.01% (16B) in 1+ places, all below ms_print's threshold (01.00%)

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 34 38,237,921,208               24               16             8            0
 35 38,237,921,247                0                0             0            0
 36 38,237,921,289               24               16             8            0
 37 38,237,921,340          512,032          512,016            16            0
 38 152,936,805,096          512,032          512,016            16            0
100.00% (512,016B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.
->99.99% (512,000B) 0x400691: _initDynArr (dynamicArray.c:30)
| ->99.99% (512,000B) 0x400740: createDynArr (dynamicArray.c:51)
|   ->99.99% (512,000B) 0x400FC7: main (dynamicArrayMain.c:21)
|     
->00.00% (16B) in 1+ places, all below ms_print's threshold (01.00%)

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 39 152,936,805,096               24               16             8            0
 40 152,936,805,135                0                0             0            0
